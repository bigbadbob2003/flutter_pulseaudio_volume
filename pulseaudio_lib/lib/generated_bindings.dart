// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `pulsetest.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam(
      __s,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Int32> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int32>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int32>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('vprintf');
  late final _vprintf =
      _vprintfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>, int)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    int __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('vdprintf');
  late final _vdprintf =
      _vdprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int)>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    int __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int32>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int32>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Int32> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, __off_t, ffi.Int32)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Int32)>>(
      '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dest,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcat(
      __dest,
      __src,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcmp');
  late final _strcmp = _strcmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcoll');
  late final _strcoll = _strcollPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    locale_t __l,
  ) {
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  late final _strcoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t)>>('strcoll_l');
  late final _strcoll_l = _strcoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t)>();

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    locale_t __l,
  ) {
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  late final _strxfrm_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, locale_t)>>('strxfrm_l');
  late final _strxfrm_l = _strxfrm_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, locale_t)>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strdup(
      __s,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('strdup');
  late final _strdup = _strdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    return _strndup(
      __string,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strndup');
  late final _strndup = _strndupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strchr');
  late final _strchr = _strchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strrchr');
  late final _strrchr = _strrchrPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    return _strcspn(
      __s,
      __reject,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcspn');
  late final _strcspn = _strcspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strspn(
      __s,
      __accept,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strspn');
  late final _strspn = _strspnPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    return _strpbrk(
      __s,
      __accept,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    return _strstr(
      __haystack,
      __needle,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strtok(
      __s,
      __delim,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final ___strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('__strtok_r');
  late final ___strtok_r = ___strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    locale_t __l,
  ) {
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  late final _strerror_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Int32, locale_t)>>('strerror_l');
  late final _strerror_l = _strerror_lPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int, locale_t)>();

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _bzero(
      __s,
      __n,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _index(
      __s,
      __c,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('index');
  late final _index = _indexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _rindex(
      __s,
      __c,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('rindex');
  late final _rindex = _rindexPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int ffs(
    int __i,
  ) {
    return _ffs(
      __i,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int ffsl(
    int __l,
  ) {
    return _ffsl(
      __l,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int __ll,
  ) {
    return _ffsll(
      __ll,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int64)>>('ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    locale_t __loc,
  ) {
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  late final _strcasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              locale_t)>>('strcasecmp_l');
  late final _strcasecmp_l = _strcasecmp_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, locale_t)>();

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    locale_t __loc,
  ) {
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  late final _strncasecmp_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, locale_t)>>('strncasecmp_l');
  late final _strncasecmp_l = _strncasecmp_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int, locale_t)>();

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  late final _explicit_bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('explicit_bzero');
  late final _explicit_bzero = _explicit_bzeroPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Int8>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  late final ___stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('__stpcpy');
  late final ___stpcpy = ___stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dest,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final ___stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('__stpncpy');
  late final ___stpncpy = ___stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int imaxabs(
    int __n,
  ) {
    return _imaxabs(
      __n,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoumax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int wcstoimax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int32)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int wcstoumax(
    ffi.Pointer<__gwchar_t> __nptr,
    ffi.Pointer<ffi.Pointer<__gwchar_t>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(ffi.Pointer<__gwchar_t>,
              ffi.Pointer<ffi.Pointer<__gwchar_t>>, ffi.Int32)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<__gwchar_t>,
          ffi.Pointer<ffi.Pointer<__gwchar_t>>, int)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>();

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    return _getitimer(
      __which,
      __value,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              __itimer_which_t, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(__itimer_which_t, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _utimes(
      __file,
      __tvp,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _lutimes(
      __file,
      __tvp,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<timeval>)>();

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _futimes(
      __fd,
      __tvp,
    );
  }

  late final _futimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<timeval>)>>('futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  __sighandler_t __sysv_signal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return ___sysv_signal(
      __sig,
      __handler,
    );
  }

  late final ___sysv_signalPtr = _lookup<
      ffi.NativeFunction<
          __sighandler_t Function(ffi.Int32, __sighandler_t)>>('__sysv_signal');
  late final ___sysv_signal = ___sysv_signalPtr
      .asFunction<__sighandler_t Function(int, __sighandler_t)>();

  __sighandler_t signal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return _signal(
      __sig,
      __handler,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          __sighandler_t Function(ffi.Int32, __sighandler_t)>>('signal');
  late final _signal =
      _signalPtr.asFunction<__sighandler_t Function(int, __sighandler_t)>();

  int kill(
    int __pid,
    int __sig,
  ) {
    return _kill(
      __pid,
      __sig,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(__pid_t, ffi.Int32)>>(
          'kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int __pgrp,
    int __sig,
  ) {
    return _killpg(
      __pgrp,
      __sig,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(__pid_t, ffi.Int32)>>(
          'killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int raise(
    int __sig,
  ) {
    return _raise(
      __sig,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  __sighandler_t ssignal(
    int __sig,
    __sighandler_t __handler,
  ) {
    return _ssignal(
      __sig,
      __handler,
    );
  }

  late final _ssignalPtr = _lookup<
      ffi.NativeFunction<
          __sighandler_t Function(ffi.Int32, __sighandler_t)>>('ssignal');
  late final _ssignal =
      _ssignalPtr.asFunction<__sighandler_t Function(int, __sighandler_t)>();

  int gsignal(
    int __sig,
  ) {
    return _gsignal(
      __sig,
    );
  }

  late final _gsignalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('gsignal');
  late final _gsignal = _gsignalPtr.asFunction<int Function(int)>();

  void psignal(
    int __sig,
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _psignal(
      __sig,
      __s,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  void psiginfo(
    ffi.Pointer<siginfo_t> __pinfo,
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _psiginfo(
      __pinfo,
      __s,
    );
  }

  late final _psiginfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Int8>)>>('psiginfo');
  late final _psiginfo = _psiginfoPtr.asFunction<
      void Function(ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Int8>)>();

  int sigblock(
    int __mask,
  ) {
    return _sigblock(
      __mask,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int __mask,
  ) {
    return _sigsetmask(
      __mask,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int siggetmask() {
    return _siggetmask();
  }

  late final _siggetmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('siggetmask');
  late final _siggetmask = _siggetmaskPtr.asFunction<int Function()>();

  int sigemptyset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigemptyset(
      __set,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigfillset(
      __set,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigaddset(
      __set,
      __signo,
    );
  }

  late final _sigaddsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<sigset_t>, ffi.Int32)>>('sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigdelset(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigdelset(
      __set,
      __signo,
    );
  }

  late final _sigdelsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<sigset_t>, ffi.Int32)>>('sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> __set,
    int __signo,
  ) {
    return _sigismember(
      __set,
      __signo,
    );
  }

  late final _sigismemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<sigset_t>, ffi.Int32)>>('sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigprocmask(
    int __how,
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<sigset_t> __oset,
  ) {
    return _sigprocmask(
      __how,
      __set,
      __oset,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigsuspend(
      __set,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int __sig,
    ffi.Pointer<sigaction> __act,
    ffi.Pointer<sigaction> __oact,
  ) {
    return _sigaction1(
      __sig,
      __act,
      __oact,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigpending(
    ffi.Pointer<sigset_t> __set,
  ) {
    return _sigpending(
      __set,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<ffi.Int32> __sig,
  ) {
    return _sigwait(
      __set,
      __sig,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int32>)>>('sigwait');
  late final _sigwait = _sigwaitPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<ffi.Int32>)>();

  int sigwaitinfo(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
  ) {
    return _sigwaitinfo(
      __set,
      __info,
    );
  }

  late final _sigwaitinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>>('sigwaitinfo');
  late final _sigwaitinfo = _sigwaitinfoPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>)>();

  int sigtimedwait(
    ffi.Pointer<sigset_t> __set,
    ffi.Pointer<siginfo_t> __info,
    ffi.Pointer<timespec> __timeout,
  ) {
    return _sigtimedwait(
      __set,
      __info,
      __timeout,
    );
  }

  late final _sigtimedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
              ffi.Pointer<timespec>)>>('sigtimedwait');
  late final _sigtimedwait = _sigtimedwaitPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<siginfo_t>,
          ffi.Pointer<timespec>)>();

  int sigqueue(
    int __pid,
    int __sig,
    sigval __val,
  ) {
    return _sigqueue(
      __pid,
      __sig,
      __val,
    );
  }

  late final _sigqueuePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(__pid_t, ffi.Int32, sigval)>>(
      'sigqueue');
  late final _sigqueue =
      _sigqueuePtr.asFunction<int Function(int, int, sigval)>();

  int sigreturn(
    ffi.Pointer<sigcontext> __scp,
  ) {
    return _sigreturn(
      __scp,
    );
  }

  late final _sigreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<sigcontext>)>>(
          'sigreturn');
  late final _sigreturn =
      _sigreturnPtr.asFunction<int Function(ffi.Pointer<sigcontext>)>();

  int siginterrupt(
    int __sig,
    int __interrupt,
  ) {
    return _siginterrupt(
      __sig,
      __interrupt,
    );
  }

  late final _siginterruptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
          'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> __ss,
    ffi.Pointer<stack_t> __oss,
  ) {
    return _sigaltstack(
      __ss,
      __oss,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigstack1(
    ffi.Pointer<sigstack> __ss,
    ffi.Pointer<sigstack> __oss,
  ) {
    return _sigstack1(
      __ss,
      __oss,
    );
  }

  late final _sigstack1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>>('sigstack');
  late final _sigstack1 = _sigstack1Ptr
      .asFunction<int Function(ffi.Pointer<sigstack>, ffi.Pointer<sigstack>)>();

  int pthread_sigmask(
    int __how,
    ffi.Pointer<__sigset_t> __newmask,
    ffi.Pointer<__sigset_t> __oldmask,
  ) {
    return _pthread_sigmask(
      __how,
      __newmask,
      __oldmask,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<__sigset_t>,
              ffi.Pointer<__sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>();

  int pthread_kill(
    int __threadid,
    int __signo,
  ) {
    return _pthread_kill(
      __threadid,
      __signo,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(pthread_t, ffi.Int32)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(int, int)>();

  int __libc_current_sigrtmin() {
    return ___libc_current_sigrtmin();
  }

  late final ___libc_current_sigrtminPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '__libc_current_sigrtmin');
  late final ___libc_current_sigrtmin =
      ___libc_current_sigrtminPtr.asFunction<int Function()>();

  int __libc_current_sigrtmax() {
    return ___libc_current_sigrtmax();
  }

  late final ___libc_current_sigrtmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '__libc_current_sigrtmax');
  late final ___libc_current_sigrtmax =
      ___libc_current_sigrtmaxPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> pa_get_library_version() {
    return _pa_get_library_version();
  }

  late final _pa_get_library_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'pa_get_library_version');
  late final _pa_get_library_version =
      _pa_get_library_versionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  int pa_bytes_per_second(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_bytes_per_second(
      spec,
    );
  }

  late final _pa_bytes_per_secondPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_bytes_per_second');
  late final _pa_bytes_per_second = _pa_bytes_per_secondPtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_frame_size(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_frame_size(
      spec,
    );
  }

  late final _pa_frame_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_frame_size');
  late final _pa_frame_size =
      _pa_frame_sizePtr.asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_size(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_size(
      spec,
    );
  }

  late final _pa_sample_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_sample_size');
  late final _pa_sample_size = _pa_sample_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_size_of_format(
    int f,
  ) {
    return _pa_sample_size_of_format(
      f,
    );
  }

  late final _pa_sample_size_of_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pa_sample_size_of_format');
  late final _pa_sample_size_of_format =
      _pa_sample_size_of_formatPtr.asFunction<int Function(int)>();

  int pa_bytes_to_usec(
    int length,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_bytes_to_usec(
      length,
      spec,
    );
  }

  late final _pa_bytes_to_usecPtr = _lookup<
      ffi.NativeFunction<
          pa_usec_t Function(
              ffi.Uint64, ffi.Pointer<pa_sample_spec>)>>('pa_bytes_to_usec');
  late final _pa_bytes_to_usec = _pa_bytes_to_usecPtr
      .asFunction<int Function(int, ffi.Pointer<pa_sample_spec>)>();

  int pa_usec_to_bytes(
    int t,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_usec_to_bytes(
      t,
      spec,
    );
  }

  late final _pa_usec_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              pa_usec_t, ffi.Pointer<pa_sample_spec>)>>('pa_usec_to_bytes');
  late final _pa_usec_to_bytes = _pa_usec_to_bytesPtr
      .asFunction<int Function(int, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<pa_sample_spec> pa_sample_spec_init(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_init(
      spec,
    );
  }

  late final _pa_sample_spec_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_sample_spec> Function(
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_init');
  late final _pa_sample_spec_init = _pa_sample_spec_initPtr.asFunction<
      ffi.Pointer<pa_sample_spec> Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_format_valid(
    int format,
  ) {
    return _pa_sample_format_valid(
      format,
    );
  }

  late final _pa_sample_format_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>(
          'pa_sample_format_valid');
  late final _pa_sample_format_valid =
      _pa_sample_format_validPtr.asFunction<int Function(int)>();

  int pa_sample_rate_valid(
    int rate,
  ) {
    return _pa_sample_rate_valid(
      rate,
    );
  }

  late final _pa_sample_rate_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>(
          'pa_sample_rate_valid');
  late final _pa_sample_rate_valid =
      _pa_sample_rate_validPtr.asFunction<int Function(int)>();

  int pa_channels_valid(
    int channels,
  ) {
    return _pa_channels_valid(
      channels,
    );
  }

  late final _pa_channels_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint8)>>(
          'pa_channels_valid');
  late final _pa_channels_valid =
      _pa_channels_validPtr.asFunction<int Function(int)>();

  int pa_sample_spec_valid(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_valid(
      spec,
    );
  }

  late final _pa_sample_spec_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_sample_spec_valid');
  late final _pa_sample_spec_valid = _pa_sample_spec_validPtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_spec_equal(
    ffi.Pointer<pa_sample_spec> a,
    ffi.Pointer<pa_sample_spec> b,
  ) {
    return _pa_sample_spec_equal(
      a,
      b,
    );
  }

  late final _pa_sample_spec_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_equal');
  late final _pa_sample_spec_equal = _pa_sample_spec_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_sample_spec>, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<ffi.Int8> pa_sample_format_to_string(
    int f,
  ) {
    return _pa_sample_format_to_string(
      f,
    );
  }

  late final _pa_sample_format_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_sample_format_to_string');
  late final _pa_sample_format_to_string = _pa_sample_format_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int pa_parse_sample_format(
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _pa_parse_sample_format(
      format,
    );
  }

  late final _pa_parse_sample_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'pa_parse_sample_format');
  late final _pa_parse_sample_format = _pa_parse_sample_formatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_sample_spec_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_snprint(
      s,
      l,
      spec,
    );
  }

  late final _pa_sample_spec_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_snprint');
  late final _pa_sample_spec_snprint = _pa_sample_spec_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<ffi.Int8> pa_bytes_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    int v,
  ) {
    return _pa_bytes_snprint(
      s,
      l,
      v,
    );
  }

  late final _pa_bytes_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Uint32)>>('pa_bytes_snprint');
  late final _pa_bytes_snprint = _pa_bytes_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  int pa_sample_format_is_le(
    int f,
  ) {
    return _pa_sample_format_is_le(
      f,
    );
  }

  late final _pa_sample_format_is_lePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pa_sample_format_is_le');
  late final _pa_sample_format_is_le =
      _pa_sample_format_is_lePtr.asFunction<int Function(int)>();

  int pa_sample_format_is_be(
    int f,
  ) {
    return _pa_sample_format_is_be(
      f,
    );
  }

  late final _pa_sample_format_is_bePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pa_sample_format_is_be');
  late final _pa_sample_format_is_be =
      _pa_sample_format_is_bePtr.asFunction<int Function(int)>();

  int pa_direction_valid(
    int direction,
  ) {
    return _pa_direction_valid(
      direction,
    );
  }

  late final _pa_direction_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pa_direction_valid');
  late final _pa_direction_valid =
      _pa_direction_validPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> pa_direction_to_string(
    int direction,
  ) {
    return _pa_direction_to_string(
      direction,
    );
  }

  late final _pa_direction_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_direction_to_string');
  late final _pa_direction_to_string = _pa_direction_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void pa_mainloop_api_once(
    ffi.Pointer<pa_mainloop_api> m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<pa_mainloop_api>, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_mainloop_api_once(
      m,
      callback,
      userdata,
    );
  }

  late final _pa_mainloop_api_oncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pa_mainloop_api_once');
  late final _pa_mainloop_api_once = _pa_mainloop_api_oncePtr.asFunction<
      void Function(
          ffi.Pointer<pa_mainloop_api>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<pa_mainloop_api>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_proplist> pa_proplist_new() {
    return _pa_proplist_new();
  }

  late final _pa_proplist_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_proplist> Function()>>(
          'pa_proplist_new');
  late final _pa_proplist_new =
      _pa_proplist_newPtr.asFunction<ffi.Pointer<pa_proplist> Function()>();

  void pa_proplist_free(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_free(
      p,
    );
  }

  late final _pa_proplist_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_free');
  late final _pa_proplist_free = _pa_proplist_freePtr
      .asFunction<void Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_key_valid(
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _pa_proplist_key_valid(
      key,
    );
  }

  late final _pa_proplist_key_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'pa_proplist_key_valid');
  late final _pa_proplist_key_valid = _pa_proplist_key_validPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_sets(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _pa_proplist_sets(
      p,
      key,
      value,
    );
  }

  late final _pa_proplist_setsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_sets');
  late final _pa_proplist_sets = _pa_proplist_setsPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_setp(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> pair,
  ) {
    return _pa_proplist_setp(
      p,
      pair,
    );
  }

  late final _pa_proplist_setpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_setp');
  late final _pa_proplist_setp = _pa_proplist_setpPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_setf(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> format,
  ) {
    return _pa_proplist_setf(
      p,
      key,
      format,
    );
  }

  late final _pa_proplist_setfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_setf');
  late final _pa_proplist_setf = _pa_proplist_setfPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_set(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
  ) {
    return _pa_proplist_set(
      p,
      key,
      data,
      nbytes,
    );
  }

  late final _pa_proplist_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('pa_proplist_set');
  late final _pa_proplist_set = _pa_proplist_setPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Int8> pa_proplist_gets(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _pa_proplist_gets(
      p,
      key,
    );
  }

  late final _pa_proplist_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_gets');
  late final _pa_proplist_gets = _pa_proplist_getsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_get(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Int32> nbytes,
  ) {
    return _pa_proplist_get(
      p,
      key,
      data,
      nbytes,
    );
  }

  late final _pa_proplist_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int32>)>>('pa_proplist_get');
  late final _pa_proplist_get = _pa_proplist_getPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Int32>)>();

  void pa_proplist_update(
    ffi.Pointer<pa_proplist> p,
    int mode,
    ffi.Pointer<pa_proplist> other,
  ) {
    return _pa_proplist_update(
      p,
      mode,
      other,
    );
  }

  late final _pa_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_proplist>, ffi.Int32,
              ffi.Pointer<pa_proplist>)>>('pa_proplist_update');
  late final _pa_proplist_update = _pa_proplist_updatePtr.asFunction<
      void Function(ffi.Pointer<pa_proplist>, int, ffi.Pointer<pa_proplist>)>();

  int pa_proplist_unset(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _pa_proplist_unset(
      p,
      key,
    );
  }

  late final _pa_proplist_unsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_unset');
  late final _pa_proplist_unset = _pa_proplist_unsetPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_unset_many(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> keys,
  ) {
    return _pa_proplist_unset_many(
      p,
      keys,
    );
  }

  late final _pa_proplist_unset_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('pa_proplist_unset_many');
  late final _pa_proplist_unset_many = _pa_proplist_unset_manyPtr.asFunction<
      int Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  ffi.Pointer<ffi.Int8> pa_proplist_iterate(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> state,
  ) {
    return _pa_proplist_iterate(
      p,
      state,
    );
  }

  late final _pa_proplist_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pa_proplist_iterate');
  late final _pa_proplist_iterate = _pa_proplist_iteratePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Int8> pa_proplist_to_string(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_to_string(
      p,
    );
  }

  late final _pa_proplist_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_proplist>)>>('pa_proplist_to_string');
  late final _pa_proplist_to_string = _pa_proplist_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<ffi.Int8> pa_proplist_to_string_sep(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> sep,
  ) {
    return _pa_proplist_to_string_sep(
      p,
      sep,
    );
  }

  late final _pa_proplist_to_string_sepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_to_string_sep');
  late final _pa_proplist_to_string_sep =
      _pa_proplist_to_string_sepPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<pa_proplist> pa_proplist_from_string(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_proplist_from_string(
      str,
    );
  }

  late final _pa_proplist_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_proplist> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_from_string');
  late final _pa_proplist_from_string = _pa_proplist_from_stringPtr
      .asFunction<ffi.Pointer<pa_proplist> Function(ffi.Pointer<ffi.Int8>)>();

  int pa_proplist_contains(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _pa_proplist_contains(
      p,
      key,
    );
  }

  late final _pa_proplist_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Int8>)>>('pa_proplist_contains');
  late final _pa_proplist_contains = _pa_proplist_containsPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Int8>)>();

  void pa_proplist_clear(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_clear(
      p,
    );
  }

  late final _pa_proplist_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_clear');
  late final _pa_proplist_clear = _pa_proplist_clearPtr
      .asFunction<void Function(ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_proplist> pa_proplist_copy(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_copy(
      p,
    );
  }

  late final _pa_proplist_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_proplist> Function(
              ffi.Pointer<pa_proplist>)>>('pa_proplist_copy');
  late final _pa_proplist_copy = _pa_proplist_copyPtr.asFunction<
      ffi.Pointer<pa_proplist> Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_size(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_size(
      p,
    );
  }

  late final _pa_proplist_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_proplist>)>>(
      'pa_proplist_size');
  late final _pa_proplist_size =
      _pa_proplist_sizePtr.asFunction<int Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_isempty(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_isempty(
      p,
    );
  }

  late final _pa_proplist_isemptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_isempty');
  late final _pa_proplist_isempty = _pa_proplist_isemptyPtr
      .asFunction<int Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_equal(
    ffi.Pointer<pa_proplist> a,
    ffi.Pointer<pa_proplist> b,
  ) {
    return _pa_proplist_equal(
      a,
      b,
    );
  }

  late final _pa_proplist_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<pa_proplist>)>>('pa_proplist_equal');
  late final _pa_proplist_equal = _pa_proplist_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init(
      m,
    );
  }

  late final _pa_channel_map_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init');
  late final _pa_channel_map_init = _pa_channel_map_initPtr.asFunction<
      ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_mono(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init_mono(
      m,
    );
  }

  late final _pa_channel_map_init_monoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init_mono');
  late final _pa_channel_map_init_mono =
      _pa_channel_map_init_monoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_stereo(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init_stereo(
      m,
    );
  }

  late final _pa_channel_map_init_stereoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init_stereo');
  late final _pa_channel_map_init_stereo =
      _pa_channel_map_init_stereoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_auto(
    ffi.Pointer<pa_channel_map> m,
    int channels,
    int def,
  ) {
    return _pa_channel_map_init_auto(
      m,
      channels,
      def,
    );
  }

  late final _pa_channel_map_init_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.Uint32, ffi.Int32)>>('pa_channel_map_init_auto');
  late final _pa_channel_map_init_auto =
      _pa_channel_map_init_autoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>, int, int)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_extend(
    ffi.Pointer<pa_channel_map> m,
    int channels,
    int def,
  ) {
    return _pa_channel_map_init_extend(
      m,
      channels,
      def,
    );
  }

  late final _pa_channel_map_init_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.Uint32, ffi.Int32)>>('pa_channel_map_init_extend');
  late final _pa_channel_map_init_extend =
      _pa_channel_map_init_extendPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>, int, int)>();

  ffi.Pointer<ffi.Int8> pa_channel_position_to_string(
    int pos,
  ) {
    return _pa_channel_position_to_string(
      pos,
    );
  }

  late final _pa_channel_position_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_channel_position_to_string');
  late final _pa_channel_position_to_string = _pa_channel_position_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int pa_channel_position_from_string(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _pa_channel_position_from_string(
      s,
    );
  }

  late final _pa_channel_position_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'pa_channel_position_from_string');
  late final _pa_channel_position_from_string =
      _pa_channel_position_from_stringPtr
          .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_channel_position_to_pretty_string(
    int pos,
  ) {
    return _pa_channel_position_to_pretty_string(
      pos,
    );
  }

  late final _pa_channel_position_to_pretty_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_channel_position_to_pretty_string');
  late final _pa_channel_position_to_pretty_string =
      _pa_channel_position_to_pretty_stringPtr
          .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  ffi.Pointer<ffi.Int8> pa_channel_map_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_snprint(
      s,
      l,
      map,
    );
  }

  late final _pa_channel_map_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_snprint');
  late final _pa_channel_map_snprint = _pa_channel_map_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_parse(
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _pa_channel_map_parse(
      map,
      s,
    );
  }

  late final _pa_channel_map_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<ffi.Int8>)>>('pa_channel_map_parse');
  late final _pa_channel_map_parse = _pa_channel_map_parsePtr.asFunction<
      ffi.Pointer<pa_channel_map> Function(
          ffi.Pointer<pa_channel_map>, ffi.Pointer<ffi.Int8>)>();

  int pa_channel_map_equal(
    ffi.Pointer<pa_channel_map> a,
    ffi.Pointer<pa_channel_map> b,
  ) {
    return _pa_channel_map_equal(
      a,
      b,
    );
  }

  late final _pa_channel_map_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_equal');
  late final _pa_channel_map_equal = _pa_channel_map_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_valid(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_valid(
      map,
    );
  }

  late final _pa_channel_map_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_valid');
  late final _pa_channel_map_valid = _pa_channel_map_validPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_compatible(
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_channel_map_compatible(
      map,
      ss,
    );
  }

  late final _pa_channel_map_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_sample_spec>)>>('pa_channel_map_compatible');
  late final _pa_channel_map_compatible =
      _pa_channel_map_compatiblePtr.asFunction<
          int Function(
              ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_sample_spec>)>();

  int pa_channel_map_superset(
    ffi.Pointer<pa_channel_map> a,
    ffi.Pointer<pa_channel_map> b,
  ) {
    return _pa_channel_map_superset(
      a,
      b,
    );
  }

  late final _pa_channel_map_supersetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_superset');
  late final _pa_channel_map_superset = _pa_channel_map_supersetPtr.asFunction<
      int Function(ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_balance(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_balance(
      map,
    );
  }

  late final _pa_channel_map_can_balancePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_balance');
  late final _pa_channel_map_can_balance = _pa_channel_map_can_balancePtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_fade(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_fade(
      map,
    );
  }

  late final _pa_channel_map_can_fadePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_fade');
  late final _pa_channel_map_can_fade = _pa_channel_map_can_fadePtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_lfe_balance(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_lfe_balance(
      map,
    );
  }

  late final _pa_channel_map_can_lfe_balancePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_lfe_balance');
  late final _pa_channel_map_can_lfe_balance =
      _pa_channel_map_can_lfe_balancePtr
          .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Int8> pa_channel_map_to_name(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_to_name(
      map,
    );
  }

  late final _pa_channel_map_to_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_to_name');
  late final _pa_channel_map_to_name = _pa_channel_map_to_namePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Int8> pa_channel_map_to_pretty_name(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_to_pretty_name(
      map,
    );
  }

  late final _pa_channel_map_to_pretty_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_to_pretty_name');
  late final _pa_channel_map_to_pretty_name =
      _pa_channel_map_to_pretty_namePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_has_position(
    ffi.Pointer<pa_channel_map> map,
    int p,
  ) {
    return _pa_channel_map_has_position(
      map,
      p,
    );
  }

  late final _pa_channel_map_has_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_channel_map>,
              ffi.Int32)>>('pa_channel_map_has_position');
  late final _pa_channel_map_has_position = _pa_channel_map_has_positionPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>, int)>();

  int pa_channel_map_mask(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_mask(
      map,
    );
  }

  late final _pa_channel_map_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_channel_position_mask_t Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_mask');
  late final _pa_channel_map_mask = _pa_channel_map_maskPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Int8> pa_encoding_to_string(
    int e,
  ) {
    return _pa_encoding_to_string(
      e,
    );
  }

  late final _pa_encoding_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_encoding_to_string');
  late final _pa_encoding_to_string = _pa_encoding_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int pa_encoding_from_string(
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    return _pa_encoding_from_string(
      encoding,
    );
  }

  late final _pa_encoding_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'pa_encoding_from_string');
  late final _pa_encoding_from_string = _pa_encoding_from_stringPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<pa_format_info> pa_format_info_new() {
    return _pa_format_info_new();
  }

  late final _pa_format_info_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_format_info> Function()>>(
          'pa_format_info_new');
  late final _pa_format_info_new = _pa_format_info_newPtr
      .asFunction<ffi.Pointer<pa_format_info> Function()>();

  ffi.Pointer<pa_format_info> pa_format_info_copy(
    ffi.Pointer<pa_format_info> src,
  ) {
    return _pa_format_info_copy(
      src,
    );
  }

  late final _pa_format_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_format_info>)>>('pa_format_info_copy');
  late final _pa_format_info_copy = _pa_format_info_copyPtr.asFunction<
      ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_format_info>)>();

  void pa_format_info_free(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_free(
      f,
    );
  }

  late final _pa_format_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_free');
  late final _pa_format_info_free = _pa_format_info_freePtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_valid(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_valid(
      f,
    );
  }

  late final _pa_format_info_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_valid');
  late final _pa_format_info_valid = _pa_format_info_validPtr
      .asFunction<int Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_is_pcm(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_is_pcm(
      f,
    );
  }

  late final _pa_format_info_is_pcmPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_is_pcm');
  late final _pa_format_info_is_pcm = _pa_format_info_is_pcmPtr
      .asFunction<int Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_is_compatible(
    ffi.Pointer<pa_format_info> first,
    ffi.Pointer<pa_format_info> second,
  ) {
    return _pa_format_info_is_compatible(
      first,
      second,
    );
  }

  late final _pa_format_info_is_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_format_info>)>>('pa_format_info_is_compatible');
  late final _pa_format_info_is_compatible =
      _pa_format_info_is_compatiblePtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_format_info>)>();

  ffi.Pointer<ffi.Int8> pa_format_info_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_snprint(
      s,
      l,
      f,
    );
  }

  late final _pa_format_info_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<pa_format_info>)>>('pa_format_info_snprint');
  late final _pa_format_info_snprint = _pa_format_info_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<pa_format_info>)>();

  ffi.Pointer<pa_format_info> pa_format_info_from_string(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_format_info_from_string(
      str,
    );
  }

  late final _pa_format_info_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_format_info_from_string');
  late final _pa_format_info_from_string =
      _pa_format_info_from_stringPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<pa_format_info> pa_format_info_from_sample_spec(
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_from_sample_spec(
      ss,
      map,
    );
  }

  late final _pa_format_info_from_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_from_sample_spec');
  late final _pa_format_info_from_sample_spec =
      _pa_format_info_from_sample_specPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_sample_spec>, ffi.Pointer<pa_channel_map>)>();

  int pa_format_info_to_sample_spec(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_to_sample_spec(
      f,
      ss,
      map,
    );
  }

  late final _pa_format_info_to_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_to_sample_spec');
  late final _pa_format_info_to_sample_spec =
      _pa_format_info_to_sample_specPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>();

  int pa_format_info_get_prop_type(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
  ) {
    return _pa_format_info_get_prop_type(
      f,
      key,
    );
  }

  late final _pa_format_info_get_prop_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>)>>('pa_format_info_get_prop_type');
  late final _pa_format_info_get_prop_type =
      _pa_format_info_get_prop_typePtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>)>();

  int pa_format_info_get_prop_int(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int32> v,
  ) {
    return _pa_format_info_get_prop_int(
      f,
      key,
      v,
    );
  }

  late final _pa_format_info_get_prop_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>>('pa_format_info_get_prop_int');
  late final _pa_format_info_get_prop_int =
      _pa_format_info_get_prop_intPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>)>();

  int pa_format_info_get_prop_int_range(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int32> min,
    ffi.Pointer<ffi.Int32> max,
  ) {
    return _pa_format_info_get_prop_int_range(
      f,
      key,
      min,
      max,
    );
  }

  late final _pa_format_info_get_prop_int_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('pa_format_info_get_prop_int_range');
  late final _pa_format_info_get_prop_int_range =
      _pa_format_info_get_prop_int_rangePtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  int pa_format_info_get_prop_int_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> values,
    ffi.Pointer<ffi.Int32> n_values,
  ) {
    return _pa_format_info_get_prop_int_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_get_prop_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>,
              ffi.Pointer<ffi.Int32>)>>('pa_format_info_get_prop_int_array');
  late final _pa_format_info_get_prop_int_array =
      _pa_format_info_get_prop_int_arrayPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>, ffi.Pointer<ffi.Int32>)>();

  int pa_format_info_get_prop_string(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> v,
  ) {
    return _pa_format_info_get_prop_string(
      f,
      key,
      v,
    );
  }

  late final _pa_format_info_get_prop_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pa_format_info>,
                  ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
      'pa_format_info_get_prop_string');
  late final _pa_format_info_get_prop_string =
      _pa_format_info_get_prop_stringPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int pa_format_info_get_prop_string_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> values,
    ffi.Pointer<ffi.Int32> n_values,
  ) {
    return _pa_format_info_get_prop_string_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_get_prop_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Int32>)>>('pa_format_info_get_prop_string_array');
  late final _pa_format_info_get_prop_string_array =
      _pa_format_info_get_prop_string_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Int32>)>();

  void pa_format_info_free_string_array(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
    int n_values,
  ) {
    return _pa_format_info_free_string_array(
      values,
      n_values,
    );
  }

  late final _pa_format_info_free_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32)>>('pa_format_info_free_string_array');
  late final _pa_format_info_free_string_array =
      _pa_format_info_free_string_arrayPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int pa_format_info_get_sample_format(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int32> sf,
  ) {
    return _pa_format_info_get_sample_format(
      f,
      sf,
    );
  }

  late final _pa_format_info_get_sample_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int32>)>>('pa_format_info_get_sample_format');
  late final _pa_format_info_get_sample_format =
      _pa_format_info_get_sample_formatPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int32>)>();

  int pa_format_info_get_rate(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Uint32> rate,
  ) {
    return _pa_format_info_get_rate(
      f,
      rate,
    );
  }

  late final _pa_format_info_get_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Uint32>)>>('pa_format_info_get_rate');
  late final _pa_format_info_get_rate = _pa_format_info_get_ratePtr.asFunction<
      int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Uint32>)>();

  int pa_format_info_get_channels(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Uint8> channels,
  ) {
    return _pa_format_info_get_channels(
      f,
      channels,
    );
  }

  late final _pa_format_info_get_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Uint8>)>>('pa_format_info_get_channels');
  late final _pa_format_info_get_channels =
      _pa_format_info_get_channelsPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Uint8>)>();

  int pa_format_info_get_channel_map(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_get_channel_map(
      f,
      map,
    );
  }

  late final _pa_format_info_get_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_get_channel_map');
  late final _pa_format_info_get_channel_map =
      _pa_format_info_get_channel_mapPtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_channel_map>)>();

  void pa_format_info_set_prop_int(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    int value,
  ) {
    return _pa_format_info_set_prop_int(
      f,
      key,
      value,
    );
  }

  late final _pa_format_info_set_prop_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('pa_format_info_set_prop_int');
  late final _pa_format_info_set_prop_int =
      _pa_format_info_set_prop_intPtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>, int)>();

  void pa_format_info_set_prop_int_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int32> values,
    int n_values,
  ) {
    return _pa_format_info_set_prop_int_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_set_prop_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('pa_format_info_set_prop_int_array');
  late final _pa_format_info_set_prop_int_array =
      _pa_format_info_set_prop_int_arrayPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int32>, int)>();

  void pa_format_info_set_prop_int_range(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    int min,
    int max,
  ) {
    return _pa_format_info_set_prop_int_range(
      f,
      key,
      min,
      max,
    );
  }

  late final _pa_format_info_set_prop_int_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Int32)>>('pa_format_info_set_prop_int_range');
  late final _pa_format_info_set_prop_int_range =
      _pa_format_info_set_prop_int_rangePtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>, int, int)>();

  void pa_format_info_set_prop_string(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _pa_format_info_set_prop_string(
      f,
      key,
      value,
    );
  }

  late final _pa_format_info_set_prop_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('pa_format_info_set_prop_string');
  late final _pa_format_info_set_prop_string =
      _pa_format_info_set_prop_stringPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  void pa_format_info_set_prop_string_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> values,
    int n_values,
  ) {
    return _pa_format_info_set_prop_string_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_set_prop_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Int32)>>('pa_format_info_set_prop_string_array');
  late final _pa_format_info_set_prop_string_array =
      _pa_format_info_set_prop_string_arrayPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  void pa_format_info_set_sample_format(
    ffi.Pointer<pa_format_info> f,
    int sf,
  ) {
    return _pa_format_info_set_sample_format(
      f,
      sf,
    );
  }

  late final _pa_format_info_set_sample_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int32)>>('pa_format_info_set_sample_format');
  late final _pa_format_info_set_sample_format =
      _pa_format_info_set_sample_formatPtr
          .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_rate(
    ffi.Pointer<pa_format_info> f,
    int rate,
  ) {
    return _pa_format_info_set_rate(
      f,
      rate,
    );
  }

  late final _pa_format_info_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int32)>>('pa_format_info_set_rate');
  late final _pa_format_info_set_rate = _pa_format_info_set_ratePtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_channels(
    ffi.Pointer<pa_format_info> f,
    int channels,
  ) {
    return _pa_format_info_set_channels(
      f,
      channels,
    );
  }

  late final _pa_format_info_set_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int32)>>('pa_format_info_set_channels');
  late final _pa_format_info_set_channels = _pa_format_info_set_channelsPtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_channel_map(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_set_channel_map(
      f,
      map,
    );
  }

  late final _pa_format_info_set_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_set_channel_map');
  late final _pa_format_info_set_channel_map =
      _pa_format_info_set_channel_mapPtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_operation> pa_operation_ref(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_ref(
      o,
    );
  }

  late final _pa_operation_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_operation>)>>('pa_operation_ref');
  late final _pa_operation_ref = _pa_operation_refPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_unref(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_unref(
      o,
    );
  }

  late final _pa_operation_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_operation>)>>(
          'pa_operation_unref');
  late final _pa_operation_unref = _pa_operation_unrefPtr
      .asFunction<void Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_cancel(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_cancel(
      o,
    );
  }

  late final _pa_operation_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_operation>)>>(
          'pa_operation_cancel');
  late final _pa_operation_cancel = _pa_operation_cancelPtr
      .asFunction<void Function(ffi.Pointer<pa_operation>)>();

  int pa_operation_get_state(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_get_state(
      o,
    );
  }

  late final _pa_operation_get_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_operation>)>>(
      'pa_operation_get_state');
  late final _pa_operation_get_state = _pa_operation_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_set_state_callback(
    ffi.Pointer<pa_operation> o,
    pa_operation_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_operation_set_state_callback(
      o,
      cb,
      userdata,
    );
  }

  late final _pa_operation_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_operation>, pa_operation_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_operation_set_state_callback');
  late final _pa_operation_set_state_callback =
      _pa_operation_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_operation>, pa_operation_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_context> pa_context_new(
    ffi.Pointer<pa_mainloop_api> mainloop,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _pa_context_new(
      mainloop,
      name,
    );
  }

  late final _pa_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Int8>)>>('pa_context_new');
  late final _pa_context_new = _pa_context_newPtr.asFunction<
      ffi.Pointer<pa_context> Function(
          ffi.Pointer<pa_mainloop_api>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<pa_context> pa_context_new_with_proplist(
    ffi.Pointer<pa_mainloop_api> mainloop,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<pa_proplist> proplist,
  ) {
    return _pa_context_new_with_proplist(
      mainloop,
      name,
      proplist,
    );
  }

  late final _pa_context_new_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_proplist>)>>('pa_context_new_with_proplist');
  late final _pa_context_new_with_proplist =
      _pa_context_new_with_proplistPtr.asFunction<
          ffi.Pointer<pa_context> Function(ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<pa_proplist>)>();

  void pa_context_unref(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_unref(
      c,
    );
  }

  late final _pa_context_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_context>)>>(
          'pa_context_unref');
  late final _pa_context_unref =
      _pa_context_unrefPtr.asFunction<void Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_context> pa_context_ref(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_ref(
      c,
    );
  }

  late final _pa_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_context>)>>('pa_context_ref');
  late final _pa_context_ref = _pa_context_refPtr
      .asFunction<ffi.Pointer<pa_context> Function(ffi.Pointer<pa_context>)>();

  void pa_context_set_state_callback(
    ffi.Pointer<pa_context> c,
    pa_context_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_state_callback(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_state_callback');
  late final _pa_context_set_state_callback =
      _pa_context_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_context_set_event_callback(
    ffi.Pointer<pa_context> p,
    pa_context_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_event_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_event_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_event_callback');
  late final _pa_context_set_event_callback =
      _pa_context_set_event_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_event_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_errno(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_errno(
      c,
    );
  }

  late final _pa_context_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_errno');
  late final _pa_context_errno =
      _pa_context_errnoPtr.asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_is_pending(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_is_pending(
      c,
    );
  }

  late final _pa_context_is_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_is_pending');
  late final _pa_context_is_pending = _pa_context_is_pendingPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_get_state(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_state(
      c,
    );
  }

  late final _pa_context_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_state');
  late final _pa_context_get_state = _pa_context_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_connect(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> server,
    int flags,
    ffi.Pointer<pa_spawn_api> api,
  ) {
    return _pa_context_connect(
      c,
      server,
      flags,
      api,
    );
  }

  late final _pa_context_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, ffi.Pointer<pa_spawn_api>)>>('pa_context_connect');
  late final _pa_context_connect = _pa_context_connectPtr.asFunction<
      int Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<pa_spawn_api>)>();

  void pa_context_disconnect(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_disconnect(
      c,
    );
  }

  late final _pa_context_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_context>)>>(
          'pa_context_disconnect');
  late final _pa_context_disconnect = _pa_context_disconnectPtr
      .asFunction<void Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_drain(
    ffi.Pointer<pa_context> c,
    pa_context_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_drain(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_drainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_drain');
  late final _pa_context_drain = _pa_context_drainPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
          pa_context_notify_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_exit_daemon(
    ffi.Pointer<pa_context> c,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_exit_daemon(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_exit_daemonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_exit_daemon');
  late final _pa_context_exit_daemon = _pa_context_exit_daemonPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_default_sink(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_default_sink(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_default_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_default_sink');
  late final _pa_context_set_default_sink =
      _pa_context_set_default_sinkPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_default_source(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_default_source(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_default_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_default_source');
  late final _pa_context_set_default_source =
      _pa_context_set_default_sourcePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_is_local(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_is_local(
      c,
    );
  }

  late final _pa_context_is_localPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_is_local');
  late final _pa_context_is_local = _pa_context_is_localPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_set_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_name');
  late final _pa_context_set_name = _pa_context_set_namePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          pa_context_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> pa_context_get_server(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_server(
      c,
    );
  }

  late final _pa_context_get_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_context>)>>('pa_context_get_server');
  late final _pa_context_get_server = _pa_context_get_serverPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_context>)>();

  int pa_context_get_protocol_version(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_protocol_version(
      c,
    );
  }

  late final _pa_context_get_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_protocol_version');
  late final _pa_context_get_protocol_version =
      _pa_context_get_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_get_server_protocol_version(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_server_protocol_version(
      c,
    );
  }

  late final _pa_context_get_server_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_server_protocol_version');
  late final _pa_context_get_server_protocol_version =
      _pa_context_get_server_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_proplist_update(
    ffi.Pointer<pa_context> c,
    int mode,
    ffi.Pointer<pa_proplist> p,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_proplist_update(
      c,
      mode,
      p,
      cb,
      userdata,
    );
  }

  late final _pa_context_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Int32,
              ffi.Pointer<pa_proplist>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_proplist_update');
  late final _pa_context_proplist_update =
      _pa_context_proplist_updatePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_proplist_remove(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> keys,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_proplist_remove(
      c,
      keys,
      cb,
      userdata,
    );
  }

  late final _pa_context_proplist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_proplist_remove');
  late final _pa_context_proplist_remove =
      _pa_context_proplist_removePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_get_index(
    ffi.Pointer<pa_context> s,
  ) {
    return _pa_context_get_index(
      s,
    );
  }

  late final _pa_context_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_index');
  late final _pa_context_get_index = _pa_context_get_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_time_event> pa_context_rttime_new(
    ffi.Pointer<pa_context> c,
    int usec,
    pa_time_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_rttime_new(
      c,
      usec,
      cb,
      userdata,
    );
  }

  late final _pa_context_rttime_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_time_event> Function(
              ffi.Pointer<pa_context>,
              pa_usec_t,
              pa_time_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_rttime_new');
  late final _pa_context_rttime_new = _pa_context_rttime_newPtr.asFunction<
      ffi.Pointer<pa_time_event> Function(ffi.Pointer<pa_context>, int,
          pa_time_event_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_context_rttime_restart(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_time_event> e,
    int usec,
  ) {
    return _pa_context_rttime_restart(
      c,
      e,
      usec,
    );
  }

  late final _pa_context_rttime_restartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_time_event>,
              pa_usec_t)>>('pa_context_rttime_restart');
  late final _pa_context_rttime_restart =
      _pa_context_rttime_restartPtr.asFunction<
          void Function(
              ffi.Pointer<pa_context>, ffi.Pointer<pa_time_event>, int)>();

  int pa_context_get_tile_size(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_context_get_tile_size(
      c,
      ss,
    );
  }

  late final _pa_context_get_tile_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_context>,
              ffi.Pointer<pa_sample_spec>)>>('pa_context_get_tile_size');
  late final _pa_context_get_tile_size =
      _pa_context_get_tile_sizePtr.asFunction<
          int Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_sample_spec>)>();

  int pa_context_load_cookie_from_file(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> cookie_file_path,
  ) {
    return _pa_context_load_cookie_from_file(
      c,
      cookie_file_path,
    );
  }

  late final _pa_context_load_cookie_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>)>>('pa_context_load_cookie_from_file');
  late final _pa_context_load_cookie_from_file =
      _pa_context_load_cookie_from_filePtr.asFunction<
          int Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Int8>)>();

  int pa_cvolume_equal(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_cvolume_equal(
      a,
      b,
    );
  }

  late final _pa_cvolume_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_equal');
  late final _pa_cvolume_equal = _pa_cvolume_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_init(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_init(
      a,
    );
  }

  late final _pa_cvolume_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_init');
  late final _pa_cvolume_init = _pa_cvolume_initPtr
      .asFunction<ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set(
    ffi.Pointer<pa_cvolume> a,
    int channels,
    int v,
  ) {
    return _pa_cvolume_set(
      a,
      channels,
      v,
    );
  }

  late final _pa_cvolume_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, ffi.Uint32,
              pa_volume_t)>>('pa_cvolume_set');
  late final _pa_cvolume_set = _pa_cvolume_setPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int, int)>();

  ffi.Pointer<ffi.Int8> pa_cvolume_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
  ) {
    return _pa_cvolume_snprint(
      s,
      l,
      c,
    );
  }

  late final _pa_cvolume_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_snprint');
  late final _pa_cvolume_snprint = _pa_cvolume_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<ffi.Int8> pa_sw_cvolume_snprint_dB(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
  ) {
    return _pa_sw_cvolume_snprint_dB(
      s,
      l,
      c,
    );
  }

  late final _pa_sw_cvolume_snprint_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_snprint_dB');
  late final _pa_sw_cvolume_snprint_dB =
      _pa_sw_cvolume_snprint_dBPtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, int, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<ffi.Int8> pa_cvolume_snprint_verbose(
    ffi.Pointer<ffi.Int8> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
    ffi.Pointer<pa_channel_map> map,
    int print_dB,
  ) {
    return _pa_cvolume_snprint_verbose(
      s,
      l,
      c,
      map,
      print_dB,
    );
  }

  late final _pa_cvolume_snprint_verbosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int32)>>('pa_cvolume_snprint_verbose');
  late final _pa_cvolume_snprint_verbose =
      _pa_cvolume_snprint_verbosePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int,
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<ffi.Int8> pa_volume_snprint(
    ffi.Pointer<ffi.Int8> s,
    int l,
    int v,
  ) {
    return _pa_volume_snprint(
      s,
      l,
      v,
    );
  }

  late final _pa_volume_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              pa_volume_t)>>('pa_volume_snprint');
  late final _pa_volume_snprint = _pa_volume_snprintPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> pa_sw_volume_snprint_dB(
    ffi.Pointer<ffi.Int8> s,
    int l,
    int v,
  ) {
    return _pa_sw_volume_snprint_dB(
      s,
      l,
      v,
    );
  }

  late final _pa_sw_volume_snprint_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              pa_volume_t)>>('pa_sw_volume_snprint_dB');
  late final _pa_sw_volume_snprint_dB = _pa_sw_volume_snprint_dBPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> pa_volume_snprint_verbose(
    ffi.Pointer<ffi.Int8> s,
    int l,
    int v,
    int print_dB,
  ) {
    return _pa_volume_snprint_verbose(
      s,
      l,
      v,
      print_dB,
    );
  }

  late final _pa_volume_snprint_verbosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, ffi.Int32,
              pa_volume_t, ffi.Int32)>>('pa_volume_snprint_verbose');
  late final _pa_volume_snprint_verbose =
      _pa_volume_snprint_verbosePtr.asFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, int, int, int)>();

  int pa_cvolume_avg(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_avg(
      a,
    );
  }

  late final _pa_cvolume_avgPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_avg');
  late final _pa_cvolume_avg =
      _pa_cvolume_avgPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_avg_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_avg_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_avg_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_avg_mask');
  late final _pa_cvolume_avg_mask = _pa_cvolume_avg_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_max(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_max(
      a,
    );
  }

  late final _pa_cvolume_maxPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_max');
  late final _pa_cvolume_max =
      _pa_cvolume_maxPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_max_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_max_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_max_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_max_mask');
  late final _pa_cvolume_max_mask = _pa_cvolume_max_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_min(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_min(
      a,
    );
  }

  late final _pa_cvolume_minPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_min');
  late final _pa_cvolume_min =
      _pa_cvolume_minPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_min_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_min_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_min_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_min_mask');
  late final _pa_cvolume_min_mask = _pa_cvolume_min_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_valid(
    ffi.Pointer<pa_cvolume> v,
  ) {
    return _pa_cvolume_valid(
      v,
    );
  }

  late final _pa_cvolume_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_cvolume>)>>(
          'pa_cvolume_valid');
  late final _pa_cvolume_valid =
      _pa_cvolume_validPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_channels_equal_to(
    ffi.Pointer<pa_cvolume> a,
    int v,
  ) {
    return _pa_cvolume_channels_equal_to(
      a,
      v,
    );
  }

  late final _pa_cvolume_channels_equal_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_cvolume_channels_equal_to');
  late final _pa_cvolume_channels_equal_to = _pa_cvolume_channels_equal_toPtr
      .asFunction<int Function(ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_multiply(
    int a,
    int b,
  ) {
    return _pa_sw_volume_multiply(
      a,
      b,
    );
  }

  late final _pa_sw_volume_multiplyPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(pa_volume_t, pa_volume_t)>>(
      'pa_sw_volume_multiply');
  late final _pa_sw_volume_multiply =
      _pa_sw_volume_multiplyPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_multiply(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_sw_cvolume_multiply(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_multiply');
  late final _pa_sw_cvolume_multiply = _pa_sw_cvolume_multiplyPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_multiply_scalar(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    int b,
  ) {
    return _pa_sw_cvolume_multiply_scalar(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_multiply_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_sw_cvolume_multiply_scalar');
  late final _pa_sw_cvolume_multiply_scalar =
      _pa_sw_cvolume_multiply_scalarPtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_divide(
    int a,
    int b,
  ) {
    return _pa_sw_volume_divide(
      a,
      b,
    );
  }

  late final _pa_sw_volume_dividePtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(pa_volume_t, pa_volume_t)>>(
      'pa_sw_volume_divide');
  late final _pa_sw_volume_divide =
      _pa_sw_volume_dividePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_divide(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_sw_cvolume_divide(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_dividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_divide');
  late final _pa_sw_cvolume_divide = _pa_sw_cvolume_dividePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_divide_scalar(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    int b,
  ) {
    return _pa_sw_cvolume_divide_scalar(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_divide_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_sw_cvolume_divide_scalar');
  late final _pa_sw_cvolume_divide_scalar =
      _pa_sw_cvolume_divide_scalarPtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_from_dB(
    double f,
  ) {
    return _pa_sw_volume_from_dB(
      f,
    );
  }

  late final _pa_sw_volume_from_dBPtr =
      _lookup<ffi.NativeFunction<pa_volume_t Function(ffi.Double)>>(
          'pa_sw_volume_from_dB');
  late final _pa_sw_volume_from_dB =
      _pa_sw_volume_from_dBPtr.asFunction<int Function(double)>();

  double pa_sw_volume_to_dB(
    int v,
  ) {
    return _pa_sw_volume_to_dB(
      v,
    );
  }

  late final _pa_sw_volume_to_dBPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pa_volume_t)>>(
          'pa_sw_volume_to_dB');
  late final _pa_sw_volume_to_dB =
      _pa_sw_volume_to_dBPtr.asFunction<double Function(int)>();

  int pa_sw_volume_from_linear(
    double v,
  ) {
    return _pa_sw_volume_from_linear(
      v,
    );
  }

  late final _pa_sw_volume_from_linearPtr =
      _lookup<ffi.NativeFunction<pa_volume_t Function(ffi.Double)>>(
          'pa_sw_volume_from_linear');
  late final _pa_sw_volume_from_linear =
      _pa_sw_volume_from_linearPtr.asFunction<int Function(double)>();

  double pa_sw_volume_to_linear(
    int v,
  ) {
    return _pa_sw_volume_to_linear(
      v,
    );
  }

  late final _pa_sw_volume_to_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pa_volume_t)>>(
          'pa_sw_volume_to_linear');
  late final _pa_sw_volume_to_linear =
      _pa_sw_volume_to_linearPtr.asFunction<double Function(int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_remap(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> from,
    ffi.Pointer<pa_channel_map> to,
  ) {
    return _pa_cvolume_remap(
      v,
      from,
      to,
    );
  }

  late final _pa_cvolume_remapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_remap');
  late final _pa_cvolume_remap = _pa_cvolume_remapPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_cvolume_compatible(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_cvolume_compatible(
      v,
      ss,
    );
  }

  late final _pa_cvolume_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_sample_spec>)>>('pa_cvolume_compatible');
  late final _pa_cvolume_compatible = _pa_cvolume_compatiblePtr.asFunction<
      int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_sample_spec>)>();

  int pa_cvolume_compatible_with_channel_map(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> cm,
  ) {
    return _pa_cvolume_compatible_with_channel_map(
      v,
      cm,
    );
  }

  late final _pa_cvolume_compatible_with_channel_mapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>>(
      'pa_cvolume_compatible_with_channel_map');
  late final _pa_cvolume_compatible_with_channel_map =
      _pa_cvolume_compatible_with_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  double pa_cvolume_get_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_balance(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_balance');
  late final _pa_cvolume_get_balance = _pa_cvolume_get_balancePtr.asFunction<
      double Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_balance,
  ) {
    return _pa_cvolume_set_balance(
      v,
      map,
      new_balance,
    );
  }

  late final _pa_cvolume_set_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Float)>>('pa_cvolume_set_balance');
  late final _pa_cvolume_set_balance = _pa_cvolume_set_balancePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  double pa_cvolume_get_fade(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_fade(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_fade');
  late final _pa_cvolume_get_fade = _pa_cvolume_get_fadePtr.asFunction<
      double Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_fade(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_fade,
  ) {
    return _pa_cvolume_set_fade(
      v,
      map,
      new_fade,
    );
  }

  late final _pa_cvolume_set_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>, ffi.Float)>>('pa_cvolume_set_fade');
  late final _pa_cvolume_set_fade = _pa_cvolume_set_fadePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  double pa_cvolume_get_lfe_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_lfe_balance(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_lfe_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_lfe_balance');
  late final _pa_cvolume_get_lfe_balance =
      _pa_cvolume_get_lfe_balancePtr.asFunction<
          double Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_lfe_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_balance,
  ) {
    return _pa_cvolume_set_lfe_balance(
      v,
      map,
      new_balance,
    );
  }

  late final _pa_cvolume_set_lfe_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Float)>>('pa_cvolume_set_lfe_balance');
  late final _pa_cvolume_set_lfe_balance =
      _pa_cvolume_set_lfe_balancePtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_scale(
    ffi.Pointer<pa_cvolume> v,
    int max,
  ) {
    return _pa_cvolume_scale(
      v,
      max,
    );
  }

  late final _pa_cvolume_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_scale');
  late final _pa_cvolume_scale = _pa_cvolume_scalePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_scale_mask(
    ffi.Pointer<pa_cvolume> v,
    int max,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_scale_mask(
      v,
      max,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_scale_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              pa_volume_t,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_scale_mask');
  late final _pa_cvolume_scale_mask = _pa_cvolume_scale_maskPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, int, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_position(
    ffi.Pointer<pa_cvolume> cv,
    ffi.Pointer<pa_channel_map> map,
    int t,
    int v,
  ) {
    return _pa_cvolume_set_position(
      cv,
      map,
      t,
      v,
    );
  }

  late final _pa_cvolume_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int32,
              pa_volume_t)>>('pa_cvolume_set_position');
  late final _pa_cvolume_set_position = _pa_cvolume_set_positionPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int, int)>();

  int pa_cvolume_get_position(
    ffi.Pointer<pa_cvolume> cv,
    ffi.Pointer<pa_channel_map> map,
    int t,
  ) {
    return _pa_cvolume_get_position(
      cv,
      map,
      t,
    );
  }

  late final _pa_cvolume_get_positionPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int32)>>('pa_cvolume_get_position');
  late final _pa_cvolume_get_position = _pa_cvolume_get_positionPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_merge(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_cvolume_merge(
      dest,
      a,
      b,
    );
  }

  late final _pa_cvolume_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_merge');
  late final _pa_cvolume_merge = _pa_cvolume_mergePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_inc_clamp(
    ffi.Pointer<pa_cvolume> v,
    int inc,
    int limit,
  ) {
    return _pa_cvolume_inc_clamp(
      v,
      inc,
      limit,
    );
  }

  late final _pa_cvolume_inc_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, pa_volume_t,
              pa_volume_t)>>('pa_cvolume_inc_clamp');
  late final _pa_cvolume_inc_clamp = _pa_cvolume_inc_clampPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_inc(
    ffi.Pointer<pa_cvolume> v,
    int inc,
  ) {
    return _pa_cvolume_inc(
      v,
      inc,
    );
  }

  late final _pa_cvolume_incPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_inc');
  late final _pa_cvolume_inc = _pa_cvolume_incPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_dec(
    ffi.Pointer<pa_cvolume> v,
    int dec,
  ) {
    return _pa_cvolume_dec(
      v,
      dec,
    );
  }

  late final _pa_cvolume_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_dec');
  late final _pa_cvolume_dec = _pa_cvolume_decPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_stream> pa_stream_new(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_stream_new(
      c,
      name,
      ss,
      map,
    );
  }

  late final _pa_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_stream_new');
  late final _pa_stream_new = _pa_stream_newPtr.asFunction<
      ffi.Pointer<pa_stream> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<pa_sample_spec>,
          ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_stream> pa_stream_new_with_proplist(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_stream_new_with_proplist(
      c,
      name,
      ss,
      map,
      p,
    );
  }

  late final _pa_stream_new_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_proplist>)>>('pa_stream_new_with_proplist');
  late final _pa_stream_new_with_proplist =
      _pa_stream_new_with_proplistPtr.asFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_stream> pa_stream_new_extended(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<pa_format_info>> formats,
    int n_formats,
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_stream_new_extended(
      c,
      name,
      formats,
      n_formats,
      p,
    );
  }

  late final _pa_stream_new_extendedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<pa_format_info>>,
              ffi.Uint32,
              ffi.Pointer<pa_proplist>)>>('pa_stream_new_extended');
  late final _pa_stream_new_extended = _pa_stream_new_extendedPtr.asFunction<
      ffi.Pointer<pa_stream> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<pa_format_info>>,
          int,
          ffi.Pointer<pa_proplist>)>();

  void pa_stream_unref(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_unref(
      s,
    );
  }

  late final _pa_stream_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_unref');
  late final _pa_stream_unref =
      _pa_stream_unrefPtr.asFunction<void Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_stream> pa_stream_ref(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_ref(
      s,
    );
  }

  late final _pa_stream_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_ref');
  late final _pa_stream_ref = _pa_stream_refPtr
      .asFunction<ffi.Pointer<pa_stream> Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_get_state(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_get_state(
      p,
    );
  }

  late final _pa_stream_get_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_state');
  late final _pa_stream_get_state = _pa_stream_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_context> pa_stream_get_context(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_get_context(
      p,
    );
  }

  late final _pa_stream_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_context');
  late final _pa_stream_get_context = _pa_stream_get_contextPtr
      .asFunction<ffi.Pointer<pa_context> Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_get_index(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_index(
      s,
    );
  }

  late final _pa_stream_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_index');
  late final _pa_stream_get_index = _pa_stream_get_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_get_device_index(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_device_index(
      s,
    );
  }

  late final _pa_stream_get_device_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_device_index');
  late final _pa_stream_get_device_index = _pa_stream_get_device_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<ffi.Int8> pa_stream_get_device_name(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_device_name(
      s,
    );
  }

  late final _pa_stream_get_device_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_device_name');
  late final _pa_stream_get_device_name = _pa_stream_get_device_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_is_suspended(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_is_suspended(
      s,
    );
  }

  late final _pa_stream_is_suspendedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_is_suspended');
  late final _pa_stream_is_suspended = _pa_stream_is_suspendedPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_is_corked(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_is_corked(
      s,
    );
  }

  late final _pa_stream_is_corkedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_is_corked');
  late final _pa_stream_is_corked = _pa_stream_is_corkedPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_connect_playback(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Int8> dev,
    ffi.Pointer<pa_buffer_attr> attr,
    int flags,
    ffi.Pointer<pa_cvolume> volume,
    ffi.Pointer<pa_stream> sync_stream,
  ) {
    return _pa_stream_connect_playback(
      s,
      dev,
      attr,
      flags,
      volume,
      sync_stream,
    );
  }

  late final _pa_stream_connect_playbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_buffer_attr>,
              ffi.Int32,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_stream>)>>('pa_stream_connect_playback');
  late final _pa_stream_connect_playback =
      _pa_stream_connect_playbackPtr.asFunction<
          int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_buffer_attr>,
              int,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_stream>)>();

  int pa_stream_connect_record(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Int8> dev,
    ffi.Pointer<pa_buffer_attr> attr,
    int flags,
  ) {
    return _pa_stream_connect_record(
      s,
      dev,
      attr,
      flags,
    );
  }

  late final _pa_stream_connect_recordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_buffer_attr>,
              ffi.Int32)>>('pa_stream_connect_record');
  late final _pa_stream_connect_record =
      _pa_stream_connect_recordPtr.asFunction<
          int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_buffer_attr>, int)>();

  int pa_stream_disconnect(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_disconnect(
      s,
    );
  }

  late final _pa_stream_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_disconnect');
  late final _pa_stream_disconnect = _pa_stream_disconnectPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_begin_write(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Int32> nbytes,
  ) {
    return _pa_stream_begin_write(
      p,
      data,
      nbytes,
    );
  }

  late final _pa_stream_begin_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int32>)>>('pa_stream_begin_write');
  late final _pa_stream_begin_write = _pa_stream_begin_writePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Int32>)>();

  int pa_stream_cancel_write(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_cancel_write(
      p,
    );
  }

  late final _pa_stream_cancel_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_cancel_write');
  late final _pa_stream_cancel_write = _pa_stream_cancel_writePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_write(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
    pa_free_cb_t free_cb,
    int offset,
    int seek,
  ) {
    return _pa_stream_write(
      p,
      data,
      nbytes,
      free_cb,
      offset,
      seek,
    );
  }

  late final _pa_stream_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              pa_free_cb_t,
              ffi.Int64,
              ffi.Int32)>>('pa_stream_write');
  late final _pa_stream_write = _pa_stream_writePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Void>, int,
          pa_free_cb_t, int, int)>();

  int pa_stream_write_ext_free(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
    pa_free_cb_t free_cb,
    ffi.Pointer<ffi.Void> free_cb_data,
    int offset,
    int seek,
  ) {
    return _pa_stream_write_ext_free(
      p,
      data,
      nbytes,
      free_cb,
      free_cb_data,
      offset,
      seek,
    );
  }

  late final _pa_stream_write_ext_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              pa_free_cb_t,
              ffi.Pointer<ffi.Void>,
              ffi.Int64,
              ffi.Int32)>>('pa_stream_write_ext_free');
  late final _pa_stream_write_ext_free =
      _pa_stream_write_ext_freePtr.asFunction<
          int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Void>, int,
              pa_free_cb_t, ffi.Pointer<ffi.Void>, int, int)>();

  int pa_stream_peek(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Int32> nbytes,
  ) {
    return _pa_stream_peek(
      p,
      data,
      nbytes,
    );
  }

  late final _pa_stream_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Int32>)>>('pa_stream_peek');
  late final _pa_stream_peek = _pa_stream_peekPtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Int32>)>();

  int pa_stream_drop(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_drop(
      p,
    );
  }

  late final _pa_stream_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_drop');
  late final _pa_stream_drop =
      _pa_stream_dropPtr.asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_writable_size(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_writable_size(
      p,
    );
  }

  late final _pa_stream_writable_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_writable_size');
  late final _pa_stream_writable_size = _pa_stream_writable_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_readable_size(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_readable_size(
      p,
    );
  }

  late final _pa_stream_readable_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_readable_size');
  late final _pa_stream_readable_size = _pa_stream_readable_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_stream_drain(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_drain(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_drainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_drain');
  late final _pa_stream_drain = _pa_stream_drainPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_update_timing_info(
    ffi.Pointer<pa_stream> p,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_update_timing_info(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_update_timing_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_update_timing_info');
  late final _pa_stream_update_timing_info =
      _pa_stream_update_timing_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_state_callback(
    ffi.Pointer<pa_stream> s,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_state_callback(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_state_callback');
  late final _pa_stream_set_state_callback =
      _pa_stream_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_write_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_request_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_write_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_write_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_write_callback');
  late final _pa_stream_set_write_callback =
      _pa_stream_set_write_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_read_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_request_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_read_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_read_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_read_callback');
  late final _pa_stream_set_read_callback =
      _pa_stream_set_read_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_overflow_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_overflow_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_overflow_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_overflow_callback');
  late final _pa_stream_set_overflow_callback =
      _pa_stream_set_overflow_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_get_underflow_index(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_get_underflow_index(
      p,
    );
  }

  late final _pa_stream_get_underflow_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_underflow_index');
  late final _pa_stream_get_underflow_index = _pa_stream_get_underflow_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  void pa_stream_set_underflow_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_underflow_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_underflow_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_underflow_callback');
  late final _pa_stream_set_underflow_callback =
      _pa_stream_set_underflow_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_started_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_started_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_started_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_started_callback');
  late final _pa_stream_set_started_callback =
      _pa_stream_set_started_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_latency_update_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_latency_update_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_latency_update_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_latency_update_callback');
  late final _pa_stream_set_latency_update_callback =
      _pa_stream_set_latency_update_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_moved_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_moved_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_moved_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_moved_callback');
  late final _pa_stream_set_moved_callback =
      _pa_stream_set_moved_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_suspended_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_suspended_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_suspended_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_suspended_callback');
  late final _pa_stream_set_suspended_callback =
      _pa_stream_set_suspended_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_event_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_event_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_event_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_event_callback');
  late final _pa_stream_set_event_callback =
      _pa_stream_set_event_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_event_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_buffer_attr_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_buffer_attr_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_buffer_attr_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_buffer_attr_callback');
  late final _pa_stream_set_buffer_attr_callback =
      _pa_stream_set_buffer_attr_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_cork(
    ffi.Pointer<pa_stream> s,
    int b,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_cork(
      s,
      b,
      cb,
      userdata,
    );
  }

  late final _pa_stream_corkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Int32,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_cork');
  late final _pa_stream_cork = _pa_stream_corkPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>, int,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_flush(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_flush(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_flush');
  late final _pa_stream_flush = _pa_stream_flushPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_prebuf(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_prebuf(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_prebufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_prebuf');
  late final _pa_stream_prebuf = _pa_stream_prebufPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_trigger(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_trigger(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_triggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_trigger');
  late final _pa_stream_trigger = _pa_stream_triggerPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_set_name(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Int8> name,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_name(
      s,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Int8>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_name');
  late final _pa_stream_set_name = _pa_stream_set_namePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_stream>,
          ffi.Pointer<ffi.Int8>,
          pa_stream_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  int pa_stream_get_time(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_usec_t> r_usec,
  ) {
    return _pa_stream_get_time(
      s,
      r_usec,
    );
  }

  late final _pa_stream_get_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_usec_t>)>>('pa_stream_get_time');
  late final _pa_stream_get_time = _pa_stream_get_timePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>)>();

  int pa_stream_get_latency(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_usec_t> r_usec,
    ffi.Pointer<ffi.Int32> negative,
  ) {
    return _pa_stream_get_latency(
      s,
      r_usec,
      negative,
    );
  }

  late final _pa_stream_get_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>,
              ffi.Pointer<ffi.Int32>)>>('pa_stream_get_latency');
  late final _pa_stream_get_latency = _pa_stream_get_latencyPtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>,
          ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<pa_timing_info> pa_stream_get_timing_info(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_timing_info(
      s,
    );
  }

  late final _pa_stream_get_timing_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_timing_info> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_timing_info');
  late final _pa_stream_get_timing_info =
      _pa_stream_get_timing_infoPtr.asFunction<
          ffi.Pointer<pa_timing_info> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_sample_spec> pa_stream_get_sample_spec(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_sample_spec(
      s,
    );
  }

  late final _pa_stream_get_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_sample_spec> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_sample_spec');
  late final _pa_stream_get_sample_spec =
      _pa_stream_get_sample_specPtr.asFunction<
          ffi.Pointer<pa_sample_spec> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_channel_map> pa_stream_get_channel_map(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_channel_map(
      s,
    );
  }

  late final _pa_stream_get_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_channel_map');
  late final _pa_stream_get_channel_map =
      _pa_stream_get_channel_mapPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_format_info> pa_stream_get_format_info(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_format_info(
      s,
    );
  }

  late final _pa_stream_get_format_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_format_info');
  late final _pa_stream_get_format_info =
      _pa_stream_get_format_infoPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_buffer_attr> pa_stream_get_buffer_attr(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_buffer_attr(
      s,
    );
  }

  late final _pa_stream_get_buffer_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_buffer_attr> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_buffer_attr');
  late final _pa_stream_get_buffer_attr =
      _pa_stream_get_buffer_attrPtr.asFunction<
          ffi.Pointer<pa_buffer_attr> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_stream_set_buffer_attr(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_buffer_attr> attr,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_buffer_attr(
      s,
      attr,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_buffer_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_buffer_attr>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_buffer_attr');
  late final _pa_stream_set_buffer_attr =
      _pa_stream_set_buffer_attrPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_buffer_attr>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_update_sample_rate(
    ffi.Pointer<pa_stream> s,
    int rate,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_update_sample_rate(
      s,
      rate,
      cb,
      userdata,
    );
  }

  late final _pa_stream_update_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Uint32,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_update_sample_rate');
  late final _pa_stream_update_sample_rate =
      _pa_stream_update_sample_ratePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>, int,
              pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_proplist_update(
    ffi.Pointer<pa_stream> s,
    int mode,
    ffi.Pointer<pa_proplist> p,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_proplist_update(
      s,
      mode,
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Int32,
              ffi.Pointer<pa_proplist>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_proplist_update');
  late final _pa_stream_proplist_update =
      _pa_stream_proplist_updatePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_proplist_remove(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> keys,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_proplist_remove(
      s,
      keys,
      cb,
      userdata,
    );
  }

  late final _pa_stream_proplist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_proplist_remove');
  late final _pa_stream_proplist_remove =
      _pa_stream_proplist_removePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_set_monitor_stream(
    ffi.Pointer<pa_stream> s,
    int sink_input_idx,
  ) {
    return _pa_stream_set_monitor_stream(
      s,
      sink_input_idx,
    );
  }

  late final _pa_stream_set_monitor_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_stream>,
              ffi.Uint32)>>('pa_stream_set_monitor_stream');
  late final _pa_stream_set_monitor_stream = _pa_stream_set_monitor_streamPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>, int)>();

  int pa_stream_get_monitor_stream(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_monitor_stream(
      s,
    );
  }

  late final _pa_stream_get_monitor_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_monitor_stream');
  late final _pa_stream_get_monitor_stream = _pa_stream_get_monitor_streamPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_by_name');
  late final _pa_context_get_sink_info_by_name =
      _pa_context_get_sink_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_by_index');
  late final _pa_context_get_sink_info_by_index =
      _pa_context_get_sink_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sink_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_list(
    ffi.Pointer<pa_context> c,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_list');
  late final _pa_context_get_sink_info_list =
      _pa_context_get_sink_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sink_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_volume_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_volume_by_index(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_volume_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_volume_by_index');
  late final _pa_context_set_sink_volume_by_index =
      _pa_context_set_sink_volume_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_volume_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_volume_by_name(
      c,
      name,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_volume_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_volume_by_name');
  late final _pa_context_set_sink_volume_by_name =
      _pa_context_set_sink_volume_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_mute_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_mute_by_index(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_mute_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_mute_by_index');
  late final _pa_context_set_sink_mute_by_index =
      _pa_context_set_sink_mute_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_mute_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_mute_by_name(
      c,
      name,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_mute_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_mute_by_name');
  late final _pa_context_set_sink_mute_by_name =
      _pa_context_set_sink_mute_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_sink_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> sink_name,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_sink_by_name(
      c,
      sink_name,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_sink_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_sink_by_name');
  late final _pa_context_suspend_sink_by_name =
      _pa_context_suspend_sink_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_sink_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_sink_by_index(
      c,
      idx,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_sink_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_sink_by_index');
  late final _pa_context_suspend_sink_by_index =
      _pa_context_suspend_sink_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_port_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Int8> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_port_by_index(
      c,
      idx,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_port_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_port_by_index');
  late final _pa_context_set_sink_port_by_index =
      _pa_context_set_sink_port_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_port_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_port_by_name(
      c,
      name,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_port_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_port_by_name');
  late final _pa_context_set_sink_port_by_name =
      _pa_context_set_sink_port_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_by_name');
  late final _pa_context_get_source_info_by_name =
      _pa_context_get_source_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_by_index');
  late final _pa_context_get_source_info_by_index =
      _pa_context_get_source_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_source_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_list(
    ffi.Pointer<pa_context> c,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_list');
  late final _pa_context_get_source_info_list =
      _pa_context_get_source_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_source_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_volume_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_volume_by_index(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_volume_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_volume_by_index');
  late final _pa_context_set_source_volume_by_index =
      _pa_context_set_source_volume_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_volume_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_volume_by_name(
      c,
      name,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_volume_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_volume_by_name');
  late final _pa_context_set_source_volume_by_name =
      _pa_context_set_source_volume_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_mute_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_mute_by_index(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_mute_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_mute_by_index');
  late final _pa_context_set_source_mute_by_index =
      _pa_context_set_source_mute_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_mute_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_mute_by_name(
      c,
      name,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_mute_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_mute_by_name');
  late final _pa_context_set_source_mute_by_name =
      _pa_context_set_source_mute_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_source_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> source_name,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_source_by_name(
      c,
      source_name,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_source_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_source_by_name');
  late final _pa_context_suspend_source_by_name =
      _pa_context_suspend_source_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_source_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_source_by_index(
      c,
      idx,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_source_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_source_by_index');
  late final _pa_context_suspend_source_by_index =
      _pa_context_suspend_source_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_port_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Int8> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_port_by_index(
      c,
      idx,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_port_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_port_by_index');
  late final _pa_context_set_source_port_by_index =
      _pa_context_set_source_port_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_port_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_port_by_name(
      c,
      name,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_port_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_port_by_name');
  late final _pa_context_set_source_port_by_name =
      _pa_context_set_source_port_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_server_info(
    ffi.Pointer<pa_context> c,
    pa_server_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_server_info(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_server_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_server_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_server_info');
  late final _pa_context_get_server_info =
      _pa_context_get_server_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_server_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_module_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_module_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_module_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_module_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_module_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_module_info');
  late final _pa_context_get_module_info =
      _pa_context_get_module_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_module_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_module_info_list(
    ffi.Pointer<pa_context> c,
    pa_module_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_module_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_module_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_module_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_module_info_list');
  late final _pa_context_get_module_info_list =
      _pa_context_get_module_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_module_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_load_module(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> argument,
    pa_context_index_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_load_module(
      c,
      name,
      argument,
      cb,
      userdata,
    );
  }

  late final _pa_context_load_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_index_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_load_module');
  late final _pa_context_load_module = _pa_context_load_modulePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          pa_context_index_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_unload_module(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_unload_module(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_unload_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_unload_module');
  late final _pa_context_unload_module =
      _pa_context_unload_modulePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_send_message_to_object(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> recipient_name,
    ffi.Pointer<ffi.Int8> message,
    ffi.Pointer<ffi.Int8> message_parameters,
    pa_context_string_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_send_message_to_object(
      c,
      recipient_name,
      message,
      message_parameters,
      cb,
      userdata,
    );
  }

  late final _pa_context_send_message_to_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_string_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_send_message_to_object');
  late final _pa_context_send_message_to_object =
      _pa_context_send_message_to_objectPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_string_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_client_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_client_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_client_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_client_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_client_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_client_info');
  late final _pa_context_get_client_info =
      _pa_context_get_client_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_client_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_client_info_list(
    ffi.Pointer<pa_context> c,
    pa_client_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_client_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_client_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_client_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_client_info_list');
  late final _pa_context_get_client_info_list =
      _pa_context_get_client_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_client_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_client(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_client(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_client');
  late final _pa_context_kill_client = _pa_context_kill_clientPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_by_index');
  late final _pa_context_get_card_info_by_index =
      _pa_context_get_card_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_card_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_by_name');
  late final _pa_context_get_card_info_by_name =
      _pa_context_get_card_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_list(
    ffi.Pointer<pa_context> c,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_list');
  late final _pa_context_get_card_info_list =
      _pa_context_get_card_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_card_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_card_profile_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Int8> profile,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_card_profile_by_index(
      c,
      idx,
      profile,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_card_profile_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_card_profile_by_index');
  late final _pa_context_set_card_profile_by_index =
      _pa_context_set_card_profile_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_card_profile_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> profile,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_card_profile_by_name(
      c,
      name,
      profile,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_card_profile_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_card_profile_by_name');
  late final _pa_context_set_card_profile_by_name =
      _pa_context_set_card_profile_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_port_latency_offset(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> card_name,
    ffi.Pointer<ffi.Int8> port_name,
    int offset,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_port_latency_offset(
      c,
      card_name,
      port_name,
      offset,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_port_latency_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int64,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_port_latency_offset');
  late final _pa_context_set_port_latency_offset =
      _pa_context_set_port_latency_offsetPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_input_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sink_input_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_input_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_input_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sink_input_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_input_info');
  late final _pa_context_get_sink_input_info =
      _pa_context_get_sink_input_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sink_input_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_input_info_list(
    ffi.Pointer<pa_context> c,
    pa_sink_input_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_input_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_input_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sink_input_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_input_info_list');
  late final _pa_context_get_sink_input_info_list =
      _pa_context_get_sink_input_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sink_input_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_sink_input_by_name(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Int8> sink_name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_sink_input_by_name(
      c,
      idx,
      sink_name,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_sink_input_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_sink_input_by_name');
  late final _pa_context_move_sink_input_by_name =
      _pa_context_move_sink_input_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_sink_input_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int sink_idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_sink_input_by_index(
      c,
      idx,
      sink_idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_sink_input_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_sink_input_by_index');
  late final _pa_context_move_sink_input_by_index =
      _pa_context_move_sink_input_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_input_volume(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_input_volume(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_input_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_input_volume');
  late final _pa_context_set_sink_input_volume =
      _pa_context_set_sink_input_volumePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_input_mute(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_input_mute(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_input_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_input_mute');
  late final _pa_context_set_sink_input_mute =
      _pa_context_set_sink_input_mutePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_sink_input(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_sink_input(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_sink_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_sink_input');
  late final _pa_context_kill_sink_input =
      _pa_context_kill_sink_inputPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_output_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_source_output_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_output_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_output_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_source_output_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_output_info');
  late final _pa_context_get_source_output_info =
      _pa_context_get_source_output_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_output_info_list(
    ffi.Pointer<pa_context> c,
    pa_source_output_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_output_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_output_info_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
                  pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>>(
      'pa_context_get_source_output_info_list');
  late final _pa_context_get_source_output_info_list =
      _pa_context_get_source_output_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_source_output_by_name(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Int8> source_name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_source_output_by_name(
      c,
      idx,
      source_name,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_source_output_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_source_output_by_name');
  late final _pa_context_move_source_output_by_name =
      _pa_context_move_source_output_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_source_output_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int source_idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_source_output_by_index(
      c,
      idx,
      source_idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_source_output_by_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_operation> Function(
                  ffi.Pointer<pa_context>,
                  ffi.Uint32,
                  ffi.Uint32,
                  pa_context_success_cb_t,
                  ffi.Pointer<ffi.Void>)>>(
      'pa_context_move_source_output_by_index');
  late final _pa_context_move_source_output_by_index =
      _pa_context_move_source_output_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_output_volume(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_output_volume(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_output_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_output_volume');
  late final _pa_context_set_source_output_volume =
      _pa_context_set_source_output_volumePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_output_mute(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_output_mute(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_output_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_output_mute');
  late final _pa_context_set_source_output_mute =
      _pa_context_set_source_output_mutePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_source_output(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_source_output(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_source_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_source_output');
  late final _pa_context_kill_source_output =
      _pa_context_kill_source_outputPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_stat(
    ffi.Pointer<pa_context> c,
    pa_stat_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_stat(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_stat_info_cb_t, ffi.Pointer<ffi.Void>)>>('pa_context_stat');
  late final _pa_context_stat = _pa_context_statPtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>, pa_stat_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_by_name');
  late final _pa_context_get_sample_info_by_name =
      _pa_context_get_sample_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_by_index');
  late final _pa_context_get_sample_info_by_index =
      _pa_context_get_sample_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sample_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_list(
    ffi.Pointer<pa_context> c,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_list');
  late final _pa_context_get_sample_info_list =
      _pa_context_get_sample_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sample_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    int type,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_by_name(
      c,
      name,
      type,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_by_name');
  late final _pa_context_get_autoload_info_by_name =
      _pa_context_get_autoload_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_by_index');
  late final _pa_context_get_autoload_info_by_index =
      _pa_context_get_autoload_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_autoload_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_list(
    ffi.Pointer<pa_context> c,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_list');
  late final _pa_context_get_autoload_info_list =
      _pa_context_get_autoload_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_autoload_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_add_autoload(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    int type,
    ffi.Pointer<ffi.Int8> module,
    ffi.Pointer<ffi.Int8> argument,
    pa_context_index_cb_t arg5,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_add_autoload(
      c,
      name,
      type,
      module,
      argument,
      arg5,
      userdata,
    );
  }

  late final _pa_context_add_autoloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_context_index_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_add_autoload');
  late final _pa_context_add_autoload = _pa_context_add_autoloadPtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          pa_context_index_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_remove_autoload_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    int type,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_autoload_by_name(
      c,
      name,
      type,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_autoload_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_autoload_by_name');
  late final _pa_context_remove_autoload_by_name =
      _pa_context_remove_autoload_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_remove_autoload_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_autoload_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_autoload_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_autoload_by_index');
  late final _pa_context_remove_autoload_by_index =
      _pa_context_remove_autoload_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_subscribe(
    ffi.Pointer<pa_context> c,
    int m,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_subscribe(
      c,
      m,
      cb,
      userdata,
    );
  }

  late final _pa_context_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Int32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_subscribe');
  late final _pa_context_subscribe = _pa_context_subscribePtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_context_set_subscribe_callback(
    ffi.Pointer<pa_context> c,
    pa_context_subscribe_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_subscribe_callback(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_subscribe_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_subscribe_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_subscribe_callback');
  late final _pa_context_set_subscribe_callback =
      _pa_context_set_subscribe_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_subscribe_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_connect_upload(
    ffi.Pointer<pa_stream> s,
    int length,
  ) {
    return _pa_stream_connect_upload(
      s,
      length,
    );
  }

  late final _pa_stream_connect_uploadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_stream>, ffi.Int32)>>('pa_stream_connect_upload');
  late final _pa_stream_connect_upload = _pa_stream_connect_uploadPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>, int)>();

  int pa_stream_finish_upload(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_finish_upload(
      s,
    );
  }

  late final _pa_stream_finish_uploadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_finish_upload');
  late final _pa_stream_finish_upload = _pa_stream_finish_uploadPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_context_remove_sample(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_sample(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_sample');
  late final _pa_context_remove_sample =
      _pa_context_remove_samplePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_play_sample(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> dev,
    int volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_play_sample(
      c,
      name,
      dev,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_play_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_volume_t,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_play_sample');
  late final _pa_context_play_sample = _pa_context_play_samplePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          pa_context_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_play_sample_with_proplist(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> dev,
    int volume,
    ffi.Pointer<pa_proplist> proplist,
    pa_context_play_sample_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_play_sample_with_proplist(
      c,
      name,
      dev,
      volume,
      proplist,
      cb,
      userdata,
    );
  }

  late final _pa_context_play_sample_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              pa_volume_t,
              ffi.Pointer<pa_proplist>,
              pa_context_play_sample_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_play_sample_with_proplist');
  late final _pa_context_play_sample_with_proplist =
      _pa_context_play_sample_with_proplistPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_context_play_sample_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> pa_strerror(
    int error,
  ) {
    return _pa_strerror(
      error,
    );
  }

  late final _pa_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'pa_strerror');
  late final _pa_strerror =
      _pa_strerrorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Pointer<ffi.Int8>, ffi.Int32,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int64, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int32, ffi.Int32)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int32,
              ffi.Int32)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int32, ffi.Int32)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int8>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int32> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>,
              ffi.Int32)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int32>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  void __assert_fail(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Uint32, ffi.Pointer<ffi.Int8>)>>('__assert_fail');
  late final ___assert_fail = ___assert_failPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Int8>)>();

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  late final ___assert_perror_failPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('__assert_perror_fail');
  late final ___assert_perror_fail = ___assert_perror_failPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>)>();

  void __assert(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
  ) {
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  late final ___assertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('__assert');
  late final ___assert = ___assertPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Void> pa_xmalloc(
    int l,
  ) {
    return _pa_xmalloc(
      l,
    );
  }

  late final _pa_xmallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'pa_xmalloc');
  late final _pa_xmalloc =
      _pa_xmallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> pa_xmalloc0(
    int l,
  ) {
    return _pa_xmalloc0(
      l,
    );
  }

  late final _pa_xmalloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int32)>>(
          'pa_xmalloc0');
  late final _pa_xmalloc0 =
      _pa_xmalloc0Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> pa_xrealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _pa_xrealloc(
      ptr,
      size,
    );
  }

  late final _pa_xreallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('pa_xrealloc');
  late final _pa_xrealloc = _pa_xreallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void pa_xfree(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _pa_xfree(
      p,
    );
  }

  late final _pa_xfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pa_xfree');
  late final _pa_xfree =
      _pa_xfreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int8> pa_xstrdup(
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _pa_xstrdup(
      s,
    );
  }

  late final _pa_xstrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('pa_xstrdup');
  late final _pa_xstrdup = _pa_xstrdupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_xstrndup(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_xstrndup(
      s,
      l,
    );
  }

  late final _pa_xstrndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_xstrndup');
  late final _pa_xstrndup = _pa_xstrndupPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Void> pa_xmemdup(
    ffi.Pointer<ffi.Void> p,
    int l,
  ) {
    return _pa_xmemdup(
      p,
      l,
    );
  }

  late final _pa_xmemdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('pa_xmemdup');
  late final _pa_xmemdup = _pa_xmemdupPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _pa_xnew_internal(
    int n,
    int k,
  ) {
    return __pa_xnew_internal(
      n,
      k,
    );
  }

  late final __pa_xnew_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int32, ffi.Int32)>>('_pa_xnew_internal');
  late final __pa_xnew_internal = __pa_xnew_internalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _pa_xnew0_internal(
    int n,
    int k,
  ) {
    return __pa_xnew0_internal(
      n,
      k,
    );
  }

  late final __pa_xnew0_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Int32, ffi.Int32)>>('_pa_xnew0_internal');
  late final __pa_xnew0_internal = __pa_xnew0_internalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _pa_xnewdup_internal(
    ffi.Pointer<ffi.Void> p,
    int n,
    int k,
  ) {
    return __pa_xnewdup_internal(
      p,
      n,
      k,
    );
  }

  late final __pa_xnewdup_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32)>>('_pa_xnewdup_internal');
  late final __pa_xnewdup_internal = __pa_xnewdup_internalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _pa_xrenew_internal(
    ffi.Pointer<ffi.Void> p,
    int n,
    int k,
  ) {
    return __pa_xrenew_internal(
      p,
      n,
      k,
    );
  }

  late final __pa_xrenew_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32,
              ffi.Int32)>>('_pa_xrenew_internal');
  late final __pa_xrenew_internal = __pa_xrenew_internalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Int8> pa_utf8_valid(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_utf8_valid(
      str,
    );
  }

  late final _pa_utf8_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_utf8_valid');
  late final _pa_utf8_valid = _pa_utf8_validPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_ascii_valid(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_ascii_valid(
      str,
    );
  }

  late final _pa_ascii_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_ascii_valid');
  late final _pa_ascii_valid = _pa_ascii_validPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_utf8_filter(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_utf8_filter(
      str,
    );
  }

  late final _pa_utf8_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_utf8_filter');
  late final _pa_utf8_filter = _pa_utf8_filterPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_ascii_filter(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_ascii_filter(
      str,
    );
  }

  late final _pa_ascii_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_ascii_filter');
  late final _pa_ascii_filter = _pa_ascii_filterPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_utf8_to_locale(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_utf8_to_locale(
      str,
    );
  }

  late final _pa_utf8_to_localePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_utf8_to_locale');
  late final _pa_utf8_to_locale = _pa_utf8_to_localePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> pa_locale_to_utf8(
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _pa_locale_to_utf8(
      str,
    );
  }

  late final _pa_locale_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_locale_to_utf8');
  late final _pa_locale_to_utf8 = _pa_locale_to_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<pa_threaded_mainloop> pa_threaded_mainloop_new() {
    return _pa_threaded_mainloop_new();
  }

  late final _pa_threaded_mainloop_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_threaded_mainloop> Function()>>(
          'pa_threaded_mainloop_new');
  late final _pa_threaded_mainloop_new = _pa_threaded_mainloop_newPtr
      .asFunction<ffi.Pointer<pa_threaded_mainloop> Function()>();

  void pa_threaded_mainloop_free(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_free(
      m,
    );
  }

  late final _pa_threaded_mainloop_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_free');
  late final _pa_threaded_mainloop_free = _pa_threaded_mainloop_freePtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_start(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_start(
      m,
    );
  }

  late final _pa_threaded_mainloop_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_start');
  late final _pa_threaded_mainloop_start = _pa_threaded_mainloop_startPtr
      .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_stop(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_stop(
      m,
    );
  }

  late final _pa_threaded_mainloop_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_stop');
  late final _pa_threaded_mainloop_stop = _pa_threaded_mainloop_stopPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_lock(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_lock(
      m,
    );
  }

  late final _pa_threaded_mainloop_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_lock');
  late final _pa_threaded_mainloop_lock = _pa_threaded_mainloop_lockPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_unlock(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_unlock(
      m,
    );
  }

  late final _pa_threaded_mainloop_unlockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_unlock');
  late final _pa_threaded_mainloop_unlock = _pa_threaded_mainloop_unlockPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_wait(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_wait(
      m,
    );
  }

  late final _pa_threaded_mainloop_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_wait');
  late final _pa_threaded_mainloop_wait = _pa_threaded_mainloop_waitPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_signal(
    ffi.Pointer<pa_threaded_mainloop> m,
    int wait_for_accept,
  ) {
    return _pa_threaded_mainloop_signal(
      m,
      wait_for_accept,
    );
  }

  late final _pa_threaded_mainloop_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
              ffi.Int32)>>('pa_threaded_mainloop_signal');
  late final _pa_threaded_mainloop_signal = _pa_threaded_mainloop_signalPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>, int)>();

  void pa_threaded_mainloop_accept(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_accept(
      m,
    );
  }

  late final _pa_threaded_mainloop_acceptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_accept');
  late final _pa_threaded_mainloop_accept = _pa_threaded_mainloop_acceptPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_get_retval(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_get_retval(
      m,
    );
  }

  late final _pa_threaded_mainloop_get_retvalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_get_retval');
  late final _pa_threaded_mainloop_get_retval =
      _pa_threaded_mainloop_get_retvalPtr
          .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  ffi.Pointer<pa_mainloop_api> pa_threaded_mainloop_get_api(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_get_api(
      m,
    );
  }

  late final _pa_threaded_mainloop_get_apiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_mainloop_api> Function(
                  ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_get_api');
  late final _pa_threaded_mainloop_get_api =
      _pa_threaded_mainloop_get_apiPtr.asFunction<
          ffi.Pointer<pa_mainloop_api> Function(
              ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_in_thread(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_in_thread(
      m,
    );
  }

  late final _pa_threaded_mainloop_in_threadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_in_thread');
  late final _pa_threaded_mainloop_in_thread =
      _pa_threaded_mainloop_in_threadPtr
          .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_set_name(
    ffi.Pointer<pa_threaded_mainloop> m,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _pa_threaded_mainloop_set_name(
      m,
      name,
    );
  }

  late final _pa_threaded_mainloop_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<ffi.Int8>)>>('pa_threaded_mainloop_set_name');
  late final _pa_threaded_mainloop_set_name =
      _pa_threaded_mainloop_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<pa_threaded_mainloop>, ffi.Pointer<ffi.Int8>)>();

  void pa_threaded_mainloop_once_unlocked(
    ffi.Pointer<pa_threaded_mainloop> m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<pa_threaded_mainloop>, ffi.Pointer<ffi.Void>)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_threaded_mainloop_once_unlocked(
      m,
      callback,
      userdata,
    );
  }

  late final _pa_threaded_mainloop_once_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pa_threaded_mainloop_once_unlocked');
  late final _pa_threaded_mainloop_once_unlocked =
      _pa_threaded_mainloop_once_unlockedPtr.asFunction<
          void Function(
              ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_mainloop> pa_mainloop_new() {
    return _pa_mainloop_new();
  }

  late final _pa_mainloop_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_mainloop> Function()>>(
          'pa_mainloop_new');
  late final _pa_mainloop_new =
      _pa_mainloop_newPtr.asFunction<ffi.Pointer<pa_mainloop> Function()>();

  void pa_mainloop_free(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_free(
      m,
    );
  }

  late final _pa_mainloop_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_free');
  late final _pa_mainloop_free = _pa_mainloop_freePtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_prepare(
    ffi.Pointer<pa_mainloop> m,
    int timeout,
  ) {
    return _pa_mainloop_prepare(
      m,
      timeout,
    );
  }

  late final _pa_mainloop_preparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<pa_mainloop>, ffi.Int32)>>('pa_mainloop_prepare');
  late final _pa_mainloop_prepare = _pa_mainloop_preparePtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>, int)>();

  int pa_mainloop_poll(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_poll(
      m,
    );
  }

  late final _pa_mainloop_pollPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_poll');
  late final _pa_mainloop_poll =
      _pa_mainloop_pollPtr.asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_dispatch(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_dispatch(
      m,
    );
  }

  late final _pa_mainloop_dispatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_dispatch');
  late final _pa_mainloop_dispatch = _pa_mainloop_dispatchPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_get_retval(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_get_retval(
      m,
    );
  }

  late final _pa_mainloop_get_retvalPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_get_retval');
  late final _pa_mainloop_get_retval = _pa_mainloop_get_retvalPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_iterate(
    ffi.Pointer<pa_mainloop> m,
    int block,
    ffi.Pointer<ffi.Int32> retval,
  ) {
    return _pa_mainloop_iterate(
      m,
      block,
      retval,
    );
  }

  late final _pa_mainloop_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_mainloop>, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('pa_mainloop_iterate');
  late final _pa_mainloop_iterate = _pa_mainloop_iteratePtr.asFunction<
      int Function(ffi.Pointer<pa_mainloop>, int, ffi.Pointer<ffi.Int32>)>();

  int pa_mainloop_run(
    ffi.Pointer<pa_mainloop> m,
    ffi.Pointer<ffi.Int32> retval,
  ) {
    return _pa_mainloop_run(
      m,
      retval,
    );
  }

  late final _pa_mainloop_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<pa_mainloop>,
              ffi.Pointer<ffi.Int32>)>>('pa_mainloop_run');
  late final _pa_mainloop_run = _pa_mainloop_runPtr.asFunction<
      int Function(ffi.Pointer<pa_mainloop>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<pa_mainloop_api> pa_mainloop_get_api(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_get_api(
      m,
    );
  }

  late final _pa_mainloop_get_apiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_mainloop_api> Function(
              ffi.Pointer<pa_mainloop>)>>('pa_mainloop_get_api');
  late final _pa_mainloop_get_api = _pa_mainloop_get_apiPtr.asFunction<
      ffi.Pointer<pa_mainloop_api> Function(ffi.Pointer<pa_mainloop>)>();

  void pa_mainloop_quit(
    ffi.Pointer<pa_mainloop> m,
    int retval,
  ) {
    return _pa_mainloop_quit(
      m,
      retval,
    );
  }

  late final _pa_mainloop_quitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_mainloop>, ffi.Int32)>>('pa_mainloop_quit');
  late final _pa_mainloop_quit = _pa_mainloop_quitPtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>, int)>();

  void pa_mainloop_wakeup(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_wakeup(
      m,
    );
  }

  late final _pa_mainloop_wakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_wakeup');
  late final _pa_mainloop_wakeup = _pa_mainloop_wakeupPtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>)>();

  void pa_mainloop_set_poll_func(
    ffi.Pointer<pa_mainloop> m,
    pa_poll_func poll_func,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_mainloop_set_poll_func(
      m,
      poll_func,
      userdata,
    );
  }

  late final _pa_mainloop_set_poll_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_mainloop>, pa_poll_func,
              ffi.Pointer<ffi.Void>)>>('pa_mainloop_set_poll_func');
  late final _pa_mainloop_set_poll_func =
      _pa_mainloop_set_poll_funcPtr.asFunction<
          void Function(
              ffi.Pointer<pa_mainloop>, pa_poll_func, ffi.Pointer<ffi.Void>)>();

  int pa_signal_init(
    ffi.Pointer<pa_mainloop_api> api,
  ) {
    return _pa_signal_init(
      api,
    );
  }

  late final _pa_signal_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<pa_mainloop_api>)>>(
      'pa_signal_init');
  late final _pa_signal_init = _pa_signal_initPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop_api>)>();

  void pa_signal_done() {
    return _pa_signal_done();
  }

  late final _pa_signal_donePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pa_signal_done');
  late final _pa_signal_done = _pa_signal_donePtr.asFunction<void Function()>();

  ffi.Pointer<pa_signal_event> pa_signal_new(
    int sig,
    pa_signal_cb_t callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_signal_new(
      sig,
      callback,
      userdata,
    );
  }

  late final _pa_signal_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_signal_event> Function(ffi.Int32, pa_signal_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_signal_new');
  late final _pa_signal_new = _pa_signal_newPtr.asFunction<
      ffi.Pointer<pa_signal_event> Function(
          int, pa_signal_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_signal_free(
    ffi.Pointer<pa_signal_event> e,
  ) {
    return _pa_signal_free(
      e,
    );
  }

  late final _pa_signal_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_signal_event>)>>(
      'pa_signal_free');
  late final _pa_signal_free = _pa_signal_freePtr
      .asFunction<void Function(ffi.Pointer<pa_signal_event>)>();

  void pa_signal_set_destroy(
    ffi.Pointer<pa_signal_event> e,
    pa_signal_destroy_cb_t callback,
  ) {
    return _pa_signal_set_destroy(
      e,
      callback,
    );
  }

  late final _pa_signal_set_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_signal_event>,
              pa_signal_destroy_cb_t)>>('pa_signal_set_destroy');
  late final _pa_signal_set_destroy = _pa_signal_set_destroyPtr.asFunction<
      void Function(ffi.Pointer<pa_signal_event>, pa_signal_destroy_cb_t)>();

  ffi.Pointer<ffi.Int8> pa_get_user_name(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_get_user_name(
      s,
      l,
    );
  }

  late final _pa_get_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_get_user_name');
  late final _pa_get_user_name = _pa_get_user_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> pa_get_host_name(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_get_host_name(
      s,
      l,
    );
  }

  late final _pa_get_host_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_get_host_name');
  late final _pa_get_host_name = _pa_get_host_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> pa_get_fqdn(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_get_fqdn(
      s,
      l,
    );
  }

  late final _pa_get_fqdnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_get_fqdn');
  late final _pa_get_fqdn = _pa_get_fqdnPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> pa_get_home_dir(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_get_home_dir(
      s,
      l,
    );
  }

  late final _pa_get_home_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_get_home_dir');
  late final _pa_get_home_dir = _pa_get_home_dirPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> pa_get_binary_name(
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _pa_get_binary_name(
      s,
      l,
    );
  }

  late final _pa_get_binary_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('pa_get_binary_name');
  late final _pa_get_binary_name = _pa_get_binary_namePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> pa_path_get_filename(
    ffi.Pointer<ffi.Int8> p,
  ) {
    return _pa_path_get_filename(
      p,
    );
  }

  late final _pa_path_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>)>>('pa_path_get_filename');
  late final _pa_path_get_filename = _pa_path_get_filenamePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int pa_msleep(
    int t,
  ) {
    return _pa_msleep(
      t,
    );
  }

  late final _pa_msleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>('pa_msleep');
  late final _pa_msleep = _pa_msleepPtr.asFunction<int Function(int)>();

  int pa_thread_make_realtime(
    int rtprio,
  ) {
    return _pa_thread_make_realtime(
      rtprio,
    );
  }

  late final _pa_thread_make_realtimePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'pa_thread_make_realtime');
  late final _pa_thread_make_realtime =
      _pa_thread_make_realtimePtr.asFunction<int Function(int)>();

  ffi.Pointer<timeval> pa_gettimeofday(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_gettimeofday(
      tv,
    );
  }

  late final _pa_gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>)>>('pa_gettimeofday');
  late final _pa_gettimeofday = _pa_gettimeofdayPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>)>();

  int pa_timeval_diff(
    ffi.Pointer<timeval> a,
    ffi.Pointer<timeval> b,
  ) {
    return _pa_timeval_diff(
      a,
      b,
    );
  }

  late final _pa_timeval_diffPtr = _lookup<
      ffi.NativeFunction<
          pa_usec_t Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('pa_timeval_diff');
  late final _pa_timeval_diff = _pa_timeval_diffPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int pa_timeval_cmp(
    ffi.Pointer<timeval> a,
    ffi.Pointer<timeval> b,
  ) {
    return _pa_timeval_cmp(
      a,
      b,
    );
  }

  late final _pa_timeval_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('pa_timeval_cmp');
  late final _pa_timeval_cmp = _pa_timeval_cmpPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int pa_timeval_age(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_timeval_age(
      tv,
    );
  }

  late final _pa_timeval_agePtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function(ffi.Pointer<timeval>)>>(
          'pa_timeval_age');
  late final _pa_timeval_age =
      _pa_timeval_agePtr.asFunction<int Function(ffi.Pointer<timeval>)>();

  ffi.Pointer<timeval> pa_timeval_add(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_add(
      tv,
      v,
    );
  }

  late final _pa_timeval_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_add');
  late final _pa_timeval_add = _pa_timeval_addPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  ffi.Pointer<timeval> pa_timeval_sub(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_sub(
      tv,
      v,
    );
  }

  late final _pa_timeval_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_sub');
  late final _pa_timeval_sub = _pa_timeval_subPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  ffi.Pointer<timeval> pa_timeval_store(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_store(
      tv,
      v,
    );
  }

  late final _pa_timeval_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_store');
  late final _pa_timeval_store = _pa_timeval_storePtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  int pa_timeval_load(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_timeval_load(
      tv,
    );
  }

  late final _pa_timeval_loadPtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function(ffi.Pointer<timeval>)>>(
          'pa_timeval_load');
  late final _pa_timeval_load =
      _pa_timeval_loadPtr.asFunction<int Function(ffi.Pointer<timeval>)>();

  int pa_rtclock_now() {
    return _pa_rtclock_now();
  }

  late final _pa_rtclock_nowPtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function()>>('pa_rtclock_now');
  late final _pa_rtclock_now = _pa_rtclock_nowPtr.asFunction<int Function()>();

  pa_deviceblock_t getDevices() {
    return _getDevices();
  }

  late final _getDevicesPtr =
      _lookup<ffi.NativeFunction<pa_deviceblock_t Function()>>('getDevices');
  late final _getDevices =
      _getDevicesPtr.asFunction<pa_deviceblock_t Function()>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

class __mbstate_t extends ffi.Struct {
  @ffi.Int32()
  external int __count;

  external UnnamedUnion1 __value;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __wchb;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Int64;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Int64;

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Int32()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Int8()
  external int _unused2;
}

class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_codecvt extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

typedef FILE = _IO_FILE;
typedef __ssize_t = ffi.Int64;
typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.Uint16> __ctype_b;

  external ffi.Pointer<ffi.Int32> __ctype_tolower;

  external ffi.Pointer<ffi.Int32> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> __names;
}

class __locale_data extends ffi.Opaque {}

typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;

class imaxdiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef intmax_t = __intmax_t;
typedef __intmax_t = ffi.Int64;
typedef uintmax_t = __uintmax_t;
typedef __uintmax_t = ffi.Uint64;
typedef __gwchar_t = ffi.Int32;

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Int64;
typedef __suseconds_t = ffi.Int64;

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Int64;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class timezone extends ffi.Struct {
  @ffi.Int32()
  external int tz_minuteswest;

  @ffi.Int32()
  external int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

typedef __itimer_which_t = ffi.Int32;

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class __once_flag extends ffi.Struct {
  @ffi.Int32()
  external int __data;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class sigval extends ffi.Union {
  @ffi.Int32()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class siginfo_t extends ffi.Struct {
  @ffi.Int32()
  external int si_signo;

  @ffi.Int32()
  external int si_errno;

  @ffi.Int32()
  external int si_code;

  @ffi.Int32()
  external int __pad0;

  external UnnamedUnion2 _sifields;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int32> _pad;

  external UnnamedStruct1 _kill;

  external UnnamedStruct2 _timer;

  external UnnamedStruct3 _rt;

  external UnnamedStruct4 _sigchld;

  external UnnamedStruct5 _sigfault;

  external UnnamedStruct7 _sigpoll;

  external UnnamedStruct8 _sigsys;
}

class UnnamedStruct1 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;
}

typedef __pid_t = ffi.Int32;
typedef __uid_t = ffi.Uint32;

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int32()
  external int si_tid;

  @ffi.Int32()
  external int si_overrun;

  external __sigval_t si_sigval;
}

typedef __sigval_t = sigval;

class UnnamedStruct3 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  external __sigval_t si_sigval;
}

class UnnamedStruct4 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  @ffi.Int32()
  external int si_status;

  @__clock_t()
  external int si_utime;

  @__clock_t()
  external int si_stime;
}

typedef __clock_t = ffi.Int64;

class UnnamedStruct5 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Int16()
  external int si_addr_lsb;

  external UnnamedUnion3 _bounds;
}

class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct6 _addr_bnd;

  @__uint32_t()
  external int _pkey;
}

class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

typedef __uint32_t = ffi.Uint32;

class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int64()
  external int si_band;

  @ffi.Int32()
  external int si_fd;
}

class UnnamedStruct8 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int32()
  external int _syscall;

  @ffi.Uint32()
  external int _arch;
}

class sigevent extends ffi.Struct {
  external __sigval_t sigev_value;

  @ffi.Int32()
  external int sigev_signo;

  @ffi.Int32()
  external int sigev_notify;

  external UnnamedUnion4 _sigev_un;
}

class UnnamedUnion4 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int32> _pad;

  @__pid_t()
  external int _tid;

  external UnnamedStruct9 _sigev_thread;
}

class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(__sigval_t)>>
      _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

typedef __sighandler_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>;
typedef sigset_t = __sigset_t;

class sigaction extends ffi.Struct {
  external UnnamedUnion5 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int32()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

class UnnamedUnion5 extends ffi.Union {
  external __sighandler_t sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int32, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

class _fpx_sw_bytes extends ffi.Struct {
  @__uint32_t()
  external int magic1;

  @__uint32_t()
  external int extended_size;

  @__uint64_t()
  external int xstate_bv;

  @__uint32_t()
  external int xstate_size;

  @ffi.Array.multi([7])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint64_t = ffi.Uint64;

class _fpreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;
}

class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __glibc_reserved1;
}

class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

class _fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint16_t = ffi.Uint16;

class sigcontext extends ffi.Struct {
  @__uint64_t()
  external int r8;

  @__uint64_t()
  external int r9;

  @__uint64_t()
  external int r10;

  @__uint64_t()
  external int r11;

  @__uint64_t()
  external int r12;

  @__uint64_t()
  external int r13;

  @__uint64_t()
  external int r14;

  @__uint64_t()
  external int r15;

  @__uint64_t()
  external int rdi;

  @__uint64_t()
  external int rsi;

  @__uint64_t()
  external int rbp;

  @__uint64_t()
  external int rbx;

  @__uint64_t()
  external int rdx;

  @__uint64_t()
  external int rax;

  @__uint64_t()
  external int rcx;

  @__uint64_t()
  external int rsp;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int eflags;

  @ffi.Uint16()
  external int cs;

  @ffi.Uint16()
  external int gs;

  @ffi.Uint16()
  external int fs;

  @ffi.Uint16()
  external int __pad0;

  @__uint64_t()
  external int err;

  @__uint64_t()
  external int trapno;

  @__uint64_t()
  external int oldmask;

  @__uint64_t()
  external int cr2;

  @ffi.Array.multi([8])
  external ffi.Array<__uint64_t> __reserved1;
}

class _xsave_hdr extends ffi.Struct {
  @__uint64_t()
  external int xstate_bv;

  @ffi.Array.multi([2])
  external ffi.Array<__uint64_t> __glibc_reserved1;

  @ffi.Array.multi([5])
  external ffi.Array<__uint64_t> __glibc_reserved2;
}

class _ymmh_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> ymmh_space;
}

class _xstate extends ffi.Struct {
  external _fpstate fpstate;

  external _xsave_hdr xstate_hdr;

  external _ymmh_state ymmh;
}

class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __glibc_reserved1;
}

class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

class _libc_fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> __reserved1;
}

typedef greg_t = ffi.Int64;
typedef fpregset_t = ffi.Pointer<_libc_fpstate>;

class ucontext_t extends ffi.Struct {
  @ffi.Uint64()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint64> __ssp;
}

typedef stack_t = UnnamedStruct10;

class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int32()
  external int ss_flags;

  @ffi.Int32()
  external int ss_size;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

typedef pthread_t = ffi.Uint64;

abstract class pa_sample_format {
  static const int PA_SAMPLE_U8 = 0;
  static const int PA_SAMPLE_ALAW = 1;
  static const int PA_SAMPLE_ULAW = 2;
  static const int PA_SAMPLE_S16LE = 3;
  static const int PA_SAMPLE_S16BE = 4;
  static const int PA_SAMPLE_FLOAT32LE = 5;
  static const int PA_SAMPLE_FLOAT32BE = 6;
  static const int PA_SAMPLE_S32LE = 7;
  static const int PA_SAMPLE_S32BE = 8;
  static const int PA_SAMPLE_S24LE = 9;
  static const int PA_SAMPLE_S24BE = 10;
  static const int PA_SAMPLE_S24_32LE = 11;
  static const int PA_SAMPLE_S24_32BE = 12;
  static const int PA_SAMPLE_MAX = 13;
  static const int PA_SAMPLE_INVALID = -1;
}

class pa_sample_spec extends ffi.Struct {
  @ffi.Int32()
  external int format;

  @ffi.Uint32()
  external int rate;

  @ffi.Uint8()
  external int channels;
}

typedef pa_usec_t = ffi.Uint64;

abstract class pa_context_state {
  static const int PA_CONTEXT_UNCONNECTED = 0;
  static const int PA_CONTEXT_CONNECTING = 1;
  static const int PA_CONTEXT_AUTHORIZING = 2;
  static const int PA_CONTEXT_SETTING_NAME = 3;
  static const int PA_CONTEXT_READY = 4;
  static const int PA_CONTEXT_FAILED = 5;
  static const int PA_CONTEXT_TERMINATED = 6;
}

abstract class pa_stream_state {
  static const int PA_STREAM_UNCONNECTED = 0;
  static const int PA_STREAM_CREATING = 1;
  static const int PA_STREAM_READY = 2;
  static const int PA_STREAM_FAILED = 3;
  static const int PA_STREAM_TERMINATED = 4;
}

abstract class pa_operation_state {
  static const int PA_OPERATION_RUNNING = 0;
  static const int PA_OPERATION_DONE = 1;
  static const int PA_OPERATION_CANCELLED = 2;
}

abstract class pa_context_flags {
  static const int PA_CONTEXT_NOFLAGS = 0;
  static const int PA_CONTEXT_NOAUTOSPAWN = 1;
  static const int PA_CONTEXT_NOFAIL = 2;
}

abstract class pa_direction {
  static const int PA_DIRECTION_OUTPUT = 1;
  static const int PA_DIRECTION_INPUT = 2;
}

abstract class pa_device_type {
  static const int PA_DEVICE_TYPE_SINK = 0;
  static const int PA_DEVICE_TYPE_SOURCE = 1;
}

abstract class pa_stream_direction {
  static const int PA_STREAM_NODIRECTION = 0;
  static const int PA_STREAM_PLAYBACK = 1;
  static const int PA_STREAM_RECORD = 2;
  static const int PA_STREAM_UPLOAD = 3;
}

abstract class pa_stream_flags {
  static const int PA_STREAM_NOFLAGS = 0;
  static const int PA_STREAM_START_CORKED = 1;
  static const int PA_STREAM_INTERPOLATE_TIMING = 2;
  static const int PA_STREAM_NOT_MONOTONIC = 4;
  static const int PA_STREAM_AUTO_TIMING_UPDATE = 8;
  static const int PA_STREAM_NO_REMAP_CHANNELS = 16;
  static const int PA_STREAM_NO_REMIX_CHANNELS = 32;
  static const int PA_STREAM_FIX_FORMAT = 64;
  static const int PA_STREAM_FIX_RATE = 128;
  static const int PA_STREAM_FIX_CHANNELS = 256;
  static const int PA_STREAM_DONT_MOVE = 512;
  static const int PA_STREAM_VARIABLE_RATE = 1024;
  static const int PA_STREAM_PEAK_DETECT = 2048;
  static const int PA_STREAM_START_MUTED = 4096;
  static const int PA_STREAM_ADJUST_LATENCY = 8192;
  static const int PA_STREAM_EARLY_REQUESTS = 16384;
  static const int PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND = 32768;
  static const int PA_STREAM_START_UNMUTED = 65536;
  static const int PA_STREAM_FAIL_ON_SUSPEND = 131072;
  static const int PA_STREAM_RELATIVE_VOLUME = 262144;
  static const int PA_STREAM_PASSTHROUGH = 524288;
}

class pa_buffer_attr extends ffi.Struct {
  @ffi.Uint32()
  external int maxlength;

  @ffi.Uint32()
  external int tlength;

  @ffi.Uint32()
  external int prebuf;

  @ffi.Uint32()
  external int minreq;

  @ffi.Uint32()
  external int fragsize;
}

abstract class pa_error_code {
  static const int PA_OK = 0;
  static const int PA_ERR_ACCESS = 1;
  static const int PA_ERR_COMMAND = 2;
  static const int PA_ERR_INVALID = 3;
  static const int PA_ERR_EXIST = 4;
  static const int PA_ERR_NOENTITY = 5;
  static const int PA_ERR_CONNECTIONREFUSED = 6;
  static const int PA_ERR_PROTOCOL = 7;
  static const int PA_ERR_TIMEOUT = 8;
  static const int PA_ERR_AUTHKEY = 9;
  static const int PA_ERR_INTERNAL = 10;
  static const int PA_ERR_CONNECTIONTERMINATED = 11;
  static const int PA_ERR_KILLED = 12;
  static const int PA_ERR_INVALIDSERVER = 13;
  static const int PA_ERR_MODINITFAILED = 14;
  static const int PA_ERR_BADSTATE = 15;
  static const int PA_ERR_NODATA = 16;
  static const int PA_ERR_VERSION = 17;
  static const int PA_ERR_TOOLARGE = 18;
  static const int PA_ERR_NOTSUPPORTED = 19;
  static const int PA_ERR_UNKNOWN = 20;
  static const int PA_ERR_NOEXTENSION = 21;
  static const int PA_ERR_OBSOLETE = 22;
  static const int PA_ERR_NOTIMPLEMENTED = 23;
  static const int PA_ERR_FORKED = 24;
  static const int PA_ERR_IO = 25;
  static const int PA_ERR_BUSY = 26;
  static const int PA_ERR_MAX = 27;
}

abstract class pa_subscription_mask {
  static const int PA_SUBSCRIPTION_MASK_NULL = 0;
  static const int PA_SUBSCRIPTION_MASK_SINK = 1;
  static const int PA_SUBSCRIPTION_MASK_SOURCE = 2;
  static const int PA_SUBSCRIPTION_MASK_SINK_INPUT = 4;
  static const int PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT = 8;
  static const int PA_SUBSCRIPTION_MASK_MODULE = 16;
  static const int PA_SUBSCRIPTION_MASK_CLIENT = 32;
  static const int PA_SUBSCRIPTION_MASK_SAMPLE_CACHE = 64;
  static const int PA_SUBSCRIPTION_MASK_SERVER = 128;
  static const int PA_SUBSCRIPTION_MASK_AUTOLOAD = 256;
  static const int PA_SUBSCRIPTION_MASK_CARD = 512;
  static const int PA_SUBSCRIPTION_MASK_ALL = 767;
}

abstract class pa_subscription_event_type {
  static const int PA_SUBSCRIPTION_EVENT_SINK = 0;
  static const int PA_SUBSCRIPTION_EVENT_SOURCE = 1;
  static const int PA_SUBSCRIPTION_EVENT_SINK_INPUT = 2;
  static const int PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT = 3;
  static const int PA_SUBSCRIPTION_EVENT_MODULE = 4;
  static const int PA_SUBSCRIPTION_EVENT_CLIENT = 5;
  static const int PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE = 6;
  static const int PA_SUBSCRIPTION_EVENT_SERVER = 7;
  static const int PA_SUBSCRIPTION_EVENT_AUTOLOAD = 8;
  static const int PA_SUBSCRIPTION_EVENT_CARD = 9;
  static const int PA_SUBSCRIPTION_EVENT_FACILITY_MASK = 15;
  static const int PA_SUBSCRIPTION_EVENT_NEW = 0;
  static const int PA_SUBSCRIPTION_EVENT_CHANGE = 16;
  static const int PA_SUBSCRIPTION_EVENT_REMOVE = 32;
  static const int PA_SUBSCRIPTION_EVENT_TYPE_MASK = 48;
}

class pa_timing_info extends ffi.Struct {
  external timeval timestamp;

  @ffi.Int32()
  external int synchronized_clocks;

  @pa_usec_t()
  external int sink_usec;

  @pa_usec_t()
  external int source_usec;

  @pa_usec_t()
  external int transport_usec;

  @ffi.Int32()
  external int playing;

  @ffi.Int32()
  external int write_index_corrupt;

  @ffi.Int64()
  external int write_index;

  @ffi.Int32()
  external int read_index_corrupt;

  @ffi.Int64()
  external int read_index;

  @pa_usec_t()
  external int configured_sink_usec;

  @pa_usec_t()
  external int configured_source_usec;

  @ffi.Int64()
  external int since_underrun;
}

class pa_spawn_api extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> prefork;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> postfork;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> atfork;
}

abstract class pa_seek_mode {
  static const int PA_SEEK_RELATIVE = 0;
  static const int PA_SEEK_ABSOLUTE = 1;
  static const int PA_SEEK_RELATIVE_ON_READ = 2;
  static const int PA_SEEK_RELATIVE_END = 3;
}

abstract class pa_sink_flags {
  static const int PA_SINK_NOFLAGS = 0;
  static const int PA_SINK_HW_VOLUME_CTRL = 1;
  static const int PA_SINK_LATENCY = 2;
  static const int PA_SINK_HARDWARE = 4;
  static const int PA_SINK_NETWORK = 8;
  static const int PA_SINK_HW_MUTE_CTRL = 16;
  static const int PA_SINK_DECIBEL_VOLUME = 32;
  static const int PA_SINK_FLAT_VOLUME = 64;
  static const int PA_SINK_DYNAMIC_LATENCY = 128;
  static const int PA_SINK_SET_FORMATS = 256;
}

abstract class pa_sink_state {
  static const int PA_SINK_INVALID_STATE = -1;
  static const int PA_SINK_RUNNING = 0;
  static const int PA_SINK_IDLE = 1;
  static const int PA_SINK_SUSPENDED = 2;
  static const int PA_SINK_INIT = -2;
  static const int PA_SINK_UNLINKED = -3;
}

abstract class pa_source_flags {
  static const int PA_SOURCE_NOFLAGS = 0;
  static const int PA_SOURCE_HW_VOLUME_CTRL = 1;
  static const int PA_SOURCE_LATENCY = 2;
  static const int PA_SOURCE_HARDWARE = 4;
  static const int PA_SOURCE_NETWORK = 8;
  static const int PA_SOURCE_HW_MUTE_CTRL = 16;
  static const int PA_SOURCE_DECIBEL_VOLUME = 32;
  static const int PA_SOURCE_DYNAMIC_LATENCY = 64;
  static const int PA_SOURCE_FLAT_VOLUME = 128;
}

abstract class pa_source_state {
  static const int PA_SOURCE_INVALID_STATE = -1;
  static const int PA_SOURCE_RUNNING = 0;
  static const int PA_SOURCE_IDLE = 1;
  static const int PA_SOURCE_SUSPENDED = 2;
  static const int PA_SOURCE_INIT = -2;
  static const int PA_SOURCE_UNLINKED = -3;
}

abstract class pa_port_available {
  static const int PA_PORT_AVAILABLE_UNKNOWN = 0;
  static const int PA_PORT_AVAILABLE_NO = 1;
  static const int PA_PORT_AVAILABLE_YES = 2;
}

abstract class pa_device_port_type {
  static const int PA_DEVICE_PORT_TYPE_UNKNOWN = 0;
  static const int PA_DEVICE_PORT_TYPE_AUX = 1;
  static const int PA_DEVICE_PORT_TYPE_SPEAKER = 2;
  static const int PA_DEVICE_PORT_TYPE_HEADPHONES = 3;
  static const int PA_DEVICE_PORT_TYPE_LINE = 4;
  static const int PA_DEVICE_PORT_TYPE_MIC = 5;
  static const int PA_DEVICE_PORT_TYPE_HEADSET = 6;
  static const int PA_DEVICE_PORT_TYPE_HANDSET = 7;
  static const int PA_DEVICE_PORT_TYPE_EARPIECE = 8;
  static const int PA_DEVICE_PORT_TYPE_SPDIF = 9;
  static const int PA_DEVICE_PORT_TYPE_HDMI = 10;
  static const int PA_DEVICE_PORT_TYPE_TV = 11;
  static const int PA_DEVICE_PORT_TYPE_RADIO = 12;
  static const int PA_DEVICE_PORT_TYPE_VIDEO = 13;
  static const int PA_DEVICE_PORT_TYPE_USB = 14;
  static const int PA_DEVICE_PORT_TYPE_BLUETOOTH = 15;
  static const int PA_DEVICE_PORT_TYPE_PORTABLE = 16;
  static const int PA_DEVICE_PORT_TYPE_HANDSFREE = 17;
  static const int PA_DEVICE_PORT_TYPE_CAR = 18;
  static const int PA_DEVICE_PORT_TYPE_HIFI = 19;
  static const int PA_DEVICE_PORT_TYPE_PHONE = 20;
  static const int PA_DEVICE_PORT_TYPE_NETWORK = 21;
  static const int PA_DEVICE_PORT_TYPE_ANALOG = 22;
}

class pa_mainloop_api extends ffi.Struct {
  external ffi.Pointer<ffi.Void> userdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_io_event> Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Int32,
              ffi.Int32,
              pa_io_event_cb_t,
              ffi.Pointer<ffi.Void>)>> io_new;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_io_event>, ffi.Int32)>> io_enable;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_io_event>)>> io_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_io_event>, pa_io_event_destroy_cb_t)>>
      io_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_time_event> Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<timeval>,
              pa_time_event_cb_t,
              ffi.Pointer<ffi.Void>)>> time_new;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_time_event>, ffi.Pointer<timeval>)>> time_restart;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_time_event>)>>
      time_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_time_event>, pa_time_event_destroy_cb_t)>>
      time_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_defer_event> Function(ffi.Pointer<pa_mainloop_api>,
              pa_defer_event_cb_t, ffi.Pointer<ffi.Void>)>> defer_new;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_defer_event>, ffi.Int32)>>
      defer_enable;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_defer_event>)>>
      defer_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_defer_event>, pa_defer_event_destroy_cb_t)>>
      defer_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_mainloop_api>, ffi.Int32)>> quit;
}

class pa_io_event extends ffi.Opaque {}

abstract class pa_io_event_flags {
  static const int PA_IO_EVENT_NULL = 0;
  static const int PA_IO_EVENT_INPUT = 1;
  static const int PA_IO_EVENT_OUTPUT = 2;
  static const int PA_IO_EVENT_HANGUP = 4;
  static const int PA_IO_EVENT_ERROR = 8;
}

typedef pa_io_event_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_io_event>,
            ffi.Int32,
            ffi.Int32,
            ffi.Pointer<ffi.Void>)>>;
typedef pa_io_event_destroy_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_io_event>, ffi.Pointer<ffi.Void>)>>;

class pa_time_event extends ffi.Opaque {}

typedef pa_time_event_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_time_event>,
            ffi.Pointer<timeval>,
            ffi.Pointer<ffi.Void>)>>;
typedef pa_time_event_destroy_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_time_event>, ffi.Pointer<ffi.Void>)>>;

class pa_defer_event extends ffi.Opaque {}

typedef pa_defer_event_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_defer_event>, ffi.Pointer<ffi.Void>)>>;
typedef pa_defer_event_destroy_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_defer_event>, ffi.Pointer<ffi.Void>)>>;

class pa_proplist extends ffi.Opaque {}

abstract class pa_update_mode {
  static const int PA_UPDATE_SET = 0;
  static const int PA_UPDATE_MERGE = 1;
  static const int PA_UPDATE_REPLACE = 2;
}

abstract class pa_channel_position {
  static const int PA_CHANNEL_POSITION_INVALID = -1;
  static const int PA_CHANNEL_POSITION_MONO = 0;
  static const int PA_CHANNEL_POSITION_FRONT_LEFT = 1;
  static const int PA_CHANNEL_POSITION_FRONT_RIGHT = 2;
  static const int PA_CHANNEL_POSITION_FRONT_CENTER = 3;
  static const int PA_CHANNEL_POSITION_LEFT = 1;
  static const int PA_CHANNEL_POSITION_RIGHT = 2;
  static const int PA_CHANNEL_POSITION_CENTER = 3;
  static const int PA_CHANNEL_POSITION_REAR_CENTER = 4;
  static const int PA_CHANNEL_POSITION_REAR_LEFT = 5;
  static const int PA_CHANNEL_POSITION_REAR_RIGHT = 6;
  static const int PA_CHANNEL_POSITION_LFE = 7;
  static const int PA_CHANNEL_POSITION_SUBWOOFER = 7;
  static const int PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER = 8;
  static const int PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER = 9;
  static const int PA_CHANNEL_POSITION_SIDE_LEFT = 10;
  static const int PA_CHANNEL_POSITION_SIDE_RIGHT = 11;
  static const int PA_CHANNEL_POSITION_AUX0 = 12;
  static const int PA_CHANNEL_POSITION_AUX1 = 13;
  static const int PA_CHANNEL_POSITION_AUX2 = 14;
  static const int PA_CHANNEL_POSITION_AUX3 = 15;
  static const int PA_CHANNEL_POSITION_AUX4 = 16;
  static const int PA_CHANNEL_POSITION_AUX5 = 17;
  static const int PA_CHANNEL_POSITION_AUX6 = 18;
  static const int PA_CHANNEL_POSITION_AUX7 = 19;
  static const int PA_CHANNEL_POSITION_AUX8 = 20;
  static const int PA_CHANNEL_POSITION_AUX9 = 21;
  static const int PA_CHANNEL_POSITION_AUX10 = 22;
  static const int PA_CHANNEL_POSITION_AUX11 = 23;
  static const int PA_CHANNEL_POSITION_AUX12 = 24;
  static const int PA_CHANNEL_POSITION_AUX13 = 25;
  static const int PA_CHANNEL_POSITION_AUX14 = 26;
  static const int PA_CHANNEL_POSITION_AUX15 = 27;
  static const int PA_CHANNEL_POSITION_AUX16 = 28;
  static const int PA_CHANNEL_POSITION_AUX17 = 29;
  static const int PA_CHANNEL_POSITION_AUX18 = 30;
  static const int PA_CHANNEL_POSITION_AUX19 = 31;
  static const int PA_CHANNEL_POSITION_AUX20 = 32;
  static const int PA_CHANNEL_POSITION_AUX21 = 33;
  static const int PA_CHANNEL_POSITION_AUX22 = 34;
  static const int PA_CHANNEL_POSITION_AUX23 = 35;
  static const int PA_CHANNEL_POSITION_AUX24 = 36;
  static const int PA_CHANNEL_POSITION_AUX25 = 37;
  static const int PA_CHANNEL_POSITION_AUX26 = 38;
  static const int PA_CHANNEL_POSITION_AUX27 = 39;
  static const int PA_CHANNEL_POSITION_AUX28 = 40;
  static const int PA_CHANNEL_POSITION_AUX29 = 41;
  static const int PA_CHANNEL_POSITION_AUX30 = 42;
  static const int PA_CHANNEL_POSITION_AUX31 = 43;
  static const int PA_CHANNEL_POSITION_TOP_CENTER = 44;
  static const int PA_CHANNEL_POSITION_TOP_FRONT_LEFT = 45;
  static const int PA_CHANNEL_POSITION_TOP_FRONT_RIGHT = 46;
  static const int PA_CHANNEL_POSITION_TOP_FRONT_CENTER = 47;
  static const int PA_CHANNEL_POSITION_TOP_REAR_LEFT = 48;
  static const int PA_CHANNEL_POSITION_TOP_REAR_RIGHT = 49;
  static const int PA_CHANNEL_POSITION_TOP_REAR_CENTER = 50;
  static const int PA_CHANNEL_POSITION_MAX = 51;
}

abstract class pa_channel_map_def {
  static const int PA_CHANNEL_MAP_AIFF = 0;
  static const int PA_CHANNEL_MAP_ALSA = 1;
  static const int PA_CHANNEL_MAP_AUX = 2;
  static const int PA_CHANNEL_MAP_WAVEEX = 3;
  static const int PA_CHANNEL_MAP_OSS = 4;
  static const int PA_CHANNEL_MAP_DEF_MAX = 5;
  static const int PA_CHANNEL_MAP_DEFAULT = 0;
}

class pa_channel_map extends ffi.Struct {
  @ffi.Uint8()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int32> map;
}

typedef pa_channel_position_mask_t = ffi.Uint64;

abstract class pa_encoding {
  static const int PA_ENCODING_ANY = 0;
  static const int PA_ENCODING_PCM = 1;
  static const int PA_ENCODING_AC3_IEC61937 = 2;
  static const int PA_ENCODING_EAC3_IEC61937 = 3;
  static const int PA_ENCODING_MPEG_IEC61937 = 4;
  static const int PA_ENCODING_DTS_IEC61937 = 5;
  static const int PA_ENCODING_MPEG2_AAC_IEC61937 = 6;
  static const int PA_ENCODING_TRUEHD_IEC61937 = 7;
  static const int PA_ENCODING_DTSHD_IEC61937 = 8;
  static const int PA_ENCODING_MAX = 9;
  static const int PA_ENCODING_INVALID = -1;
}

class pa_format_info extends ffi.Struct {
  @ffi.Int32()
  external int encoding;

  external ffi.Pointer<pa_proplist> plist;
}

abstract class pa_prop_type_t {
  static const int PA_PROP_TYPE_INT = 0;
  static const int PA_PROP_TYPE_INT_RANGE = 1;
  static const int PA_PROP_TYPE_INT_ARRAY = 2;
  static const int PA_PROP_TYPE_STRING = 3;
  static const int PA_PROP_TYPE_STRING_ARRAY = 4;
  static const int PA_PROP_TYPE_INVALID = -1;
}

class pa_operation extends ffi.Opaque {}

typedef pa_operation_notify_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_operation>, ffi.Pointer<ffi.Void>)>>;

class pa_context extends ffi.Opaque {}

typedef pa_context_notify_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Void>)>>;
typedef pa_context_event_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Void>)>>;
typedef pa_context_success_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_context>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class pa_cvolume extends ffi.Struct {
  @ffi.Uint8()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<pa_volume_t> values;
}

typedef pa_volume_t = ffi.Uint32;

class pa_stream extends ffi.Opaque {}

typedef pa_free_cb_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef pa_stream_success_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_stream>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef pa_stream_notify_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Void>)>>;
typedef pa_stream_request_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_stream>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef pa_stream_event_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Void>)>>;

class pa_sink_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int32()
  external int available;

  external ffi.Pointer<ffi.Int8> availability_group;

  @ffi.Uint32()
  external int type;
}

class pa_sink_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> description;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @ffi.Uint32()
  external int owner_module;

  external pa_cvolume volume;

  @ffi.Int32()
  external int mute;

  @ffi.Uint32()
  external int monitor_source;

  external ffi.Pointer<ffi.Int8> monitor_source_name;

  @pa_usec_t()
  external int latency;

  external ffi.Pointer<ffi.Int8> driver;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<pa_proplist> proplist;

  @pa_usec_t()
  external int configured_latency;

  @pa_volume_t()
  external int base_volume;

  @ffi.Int32()
  external int state;

  @ffi.Uint32()
  external int n_volume_steps;

  @ffi.Uint32()
  external int card;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_sink_port_info>> ports;

  external ffi.Pointer<pa_sink_port_info> active_port;

  @ffi.Uint8()
  external int n_formats;

  external ffi.Pointer<ffi.Pointer<pa_format_info>> formats;
}

typedef pa_sink_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_sink_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class pa_source_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int32()
  external int available;

  external ffi.Pointer<ffi.Int8> availability_group;

  @ffi.Uint32()
  external int type;
}

class pa_source_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> description;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @ffi.Uint32()
  external int owner_module;

  external pa_cvolume volume;

  @ffi.Int32()
  external int mute;

  @ffi.Uint32()
  external int monitor_of_sink;

  external ffi.Pointer<ffi.Int8> monitor_of_sink_name;

  @pa_usec_t()
  external int latency;

  external ffi.Pointer<ffi.Int8> driver;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<pa_proplist> proplist;

  @pa_usec_t()
  external int configured_latency;

  @pa_volume_t()
  external int base_volume;

  @ffi.Int32()
  external int state;

  @ffi.Uint32()
  external int n_volume_steps;

  @ffi.Uint32()
  external int card;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_source_port_info>> ports;

  external ffi.Pointer<pa_source_port_info> active_port;

  @ffi.Uint8()
  external int n_formats;

  external ffi.Pointer<ffi.Pointer<pa_format_info>> formats;
}

typedef pa_source_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_source_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class pa_server_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> user_name;

  external ffi.Pointer<ffi.Int8> host_name;

  external ffi.Pointer<ffi.Int8> server_version;

  external ffi.Pointer<ffi.Int8> server_name;

  external pa_sample_spec sample_spec;

  external ffi.Pointer<ffi.Int8> default_sink_name;

  external ffi.Pointer<ffi.Int8> default_source_name;

  @ffi.Uint32()
  external int cookie;

  external pa_channel_map channel_map;
}

typedef pa_server_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_server_info>,
            ffi.Pointer<ffi.Void>)>>;

class pa_module_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> argument;

  @ffi.Uint32()
  external int n_used;

  @ffi.Int32()
  external int auto_unload;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_module_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_module_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef pa_context_index_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_context>, ffi.Uint32, ffi.Pointer<ffi.Void>)>>;
typedef pa_context_string_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Int32,
            ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>>;

class pa_client_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int owner_module;

  external ffi.Pointer<ffi.Int8> driver;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_client_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_client_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class pa_card_profile_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> description;

  @ffi.Uint32()
  external int n_sinks;

  @ffi.Uint32()
  external int n_sources;

  @ffi.Uint32()
  external int priority;
}

class pa_card_profile_info2 extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> description;

  @ffi.Uint32()
  external int n_sinks;

  @ffi.Uint32()
  external int n_sources;

  @ffi.Uint32()
  external int priority;

  @ffi.Int32()
  external int available;
}

class pa_card_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int32()
  external int available;

  @ffi.Int32()
  external int direction;

  @ffi.Uint32()
  external int n_profiles;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info>> profiles;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int64()
  external int latency_offset;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info2>> profiles2;

  external ffi.Pointer<ffi.Int8> availability_group;

  @ffi.Uint32()
  external int type;
}

class pa_card_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int owner_module;

  external ffi.Pointer<ffi.Int8> driver;

  @ffi.Uint32()
  external int n_profiles;

  external ffi.Pointer<pa_card_profile_info> profiles;

  external ffi.Pointer<pa_card_profile_info> active_profile;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_card_port_info>> ports;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info2>> profiles2;

  external ffi.Pointer<pa_card_profile_info2> active_profile2;
}

typedef pa_card_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_card_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class pa_sink_input_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int owner_module;

  @ffi.Uint32()
  external int client;

  @ffi.Uint32()
  external int sink;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  external pa_cvolume volume;

  @pa_usec_t()
  external int buffer_usec;

  @pa_usec_t()
  external int sink_usec;

  external ffi.Pointer<ffi.Int8> resample_method;

  external ffi.Pointer<ffi.Int8> driver;

  @ffi.Int32()
  external int mute;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int32()
  external int corked;

  @ffi.Int32()
  external int has_volume;

  @ffi.Int32()
  external int volume_writable;

  external ffi.Pointer<pa_format_info> format;
}

typedef pa_sink_input_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_context>,
            ffi.Pointer<pa_sink_input_info>,
            ffi.Int32,
            ffi.Pointer<ffi.Void>)>>;

class pa_source_output_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Uint32()
  external int owner_module;

  @ffi.Uint32()
  external int client;

  @ffi.Uint32()
  external int source;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @pa_usec_t()
  external int buffer_usec;

  @pa_usec_t()
  external int source_usec;

  external ffi.Pointer<ffi.Int8> resample_method;

  external ffi.Pointer<ffi.Int8> driver;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int32()
  external int corked;

  external pa_cvolume volume;

  @ffi.Int32()
  external int mute;

  @ffi.Int32()
  external int has_volume;

  @ffi.Int32()
  external int volume_writable;

  external ffi.Pointer<pa_format_info> format;
}

typedef pa_source_output_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_context>,
            ffi.Pointer<pa_source_output_info>,
            ffi.Int32,
            ffi.Pointer<ffi.Void>)>>;

class pa_stat_info extends ffi.Struct {
  @ffi.Uint32()
  external int memblock_total;

  @ffi.Uint32()
  external int memblock_total_size;

  @ffi.Uint32()
  external int memblock_allocated;

  @ffi.Uint32()
  external int memblock_allocated_size;

  @ffi.Uint32()
  external int scache_size;
}

typedef pa_stat_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_stat_info>,
            ffi.Pointer<ffi.Void>)>>;

class pa_sample_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  external pa_cvolume volume;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @pa_usec_t()
  external int duration;

  @ffi.Uint32()
  external int bytes;

  @ffi.Int32()
  external int lazy;

  external ffi.Pointer<ffi.Int8> filename;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_sample_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_sample_info>,
            ffi.Int32, ffi.Pointer<ffi.Void>)>>;

abstract class pa_autoload_type {
  static const int PA_AUTOLOAD_SINK = 0;
  static const int PA_AUTOLOAD_SOURCE = 1;
}

class pa_autoload_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Int8> module;

  external ffi.Pointer<ffi.Int8> argument;
}

typedef pa_autoload_info_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>,
            ffi.Pointer<pa_autoload_info>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef pa_context_subscribe_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_context>, ffi.Int32, ffi.Uint32,
            ffi.Pointer<ffi.Void>)>>;
typedef pa_context_play_sample_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<pa_context>, ffi.Uint32, ffi.Pointer<ffi.Void>)>>;

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class pa_threaded_mainloop extends ffi.Opaque {}

class pollfd extends ffi.Opaque {}

class pa_mainloop extends ffi.Opaque {}

typedef pa_poll_func = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<pollfd>, ffi.Uint64, ffi.Int32,
            ffi.Pointer<ffi.Void>)>>;

class pa_signal_event extends ffi.Opaque {}

typedef pa_signal_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_signal_event>, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef pa_signal_destroy_cb_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<pa_mainloop_api>,
            ffi.Pointer<pa_signal_event>, ffi.Pointer<ffi.Void>)>>;

class pa_devicelist extends ffi.Struct {
  @ffi.Uint8()
  external int initialized;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Int8> name;

  @ffi.Uint32()
  external int index;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> description;
}

class pa_deviceblock extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<pa_devicelist_t> pa_input_devicelist;

  @ffi.Array.multi([16])
  external ffi.Array<pa_devicelist_t> pa_output_devicelist;

  @ffi.Array.multi([16])
  external ffi.Array<pa_devicelist_t> pa_sinkinput_devicelist;

  @ffi.Array.multi([16])
  external ffi.Array<pa_devicelist_t> pa_sourceoutput_devicelist;
}

typedef pa_devicelist_t = pa_devicelist;
typedef pa_deviceblock_t = pa_deviceblock;

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_MTEAERR = 8;

const int SEGV_MTESERR = 9;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int _STDIO_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 33;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int _BITS_STDIO_LIM_H = 1;

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _STRING_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int _INTTYPES_H = 1;

const int _STDINT_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int _SYS_TIME_H = 1;

const int __time_t_defined = 1;

const int __timeval_defined = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int _STRUCT_TIMESPEC = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _SYS_PARAM_H = 1;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int PTHREAD_STACK_MIN = 16384;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int _BITS_SIGNUM_ARCH_H = 1;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXFSZ = 25;

const int SIGXCPU = 24;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int __SIGRTMIN = 32;

const int __SIGRTMAX = 64;

const int _NSIG = 65;

const int __sig_atomic_t_defined = 1;

const int __siginfo_t_defined = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int _BITS_SIGINFO_ARCH_H = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int SEGV_MTEAERR1 = 8;

const int SEGV_MTESERR1 = 9;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int __sigevent_t_defined = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int NSIG = 65;

const int _BITS_SIGACTION_H = 1;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int _BITS_SIGCONTEXT_H = 1;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int __stack_t_defined = 1;

const int _SYS_UCONTEXT_H = 1;

const int __NGREG = 23;

const int NGREG = 23;

const int _BITS_SIGSTACK_H = 1;

const int MINSIGSTKSZ = 2048;

const int SIGSTKSZ = 8192;

const int _BITS_SS_FLAGS_H = 1;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const int __sigstack_defined = 1;

const int _BITS_SIGTHREAD_H = 1;

const int HZ = 100;

const int EXEC_PAGESIZE = 4096;

const int NOGROUP = -1;

const int MAXHOSTNAMELEN = 64;

const int MAXSYMLINKS = 20;

const int NOFILE = 256;

const int NCARGS = 131072;

const int NGROUPS = 65536;

const int CANBSIZ = 255;

const int MAXPATHLEN = 4096;

const int NODEV = -1;

const int DEV_BSIZE = 512;

const int PA_API_VERSION = 12;

const int PA_PROTOCOL_VERSION = 35;

const int PA_MAJOR = 15;

const int PA_MINOR = 0;

const int PA_MICRO = 0;

const int PA_CHANNELS_MAX = 32;

const int PA_RATE_MAX = 384000;

const int PA_SAMPLE_S16NE = 3;

const int PA_SAMPLE_FLOAT32NE = 5;

const int PA_SAMPLE_S32NE = 7;

const int PA_SAMPLE_S24NE = 9;

const int PA_SAMPLE_S24_32NE = 11;

const int PA_SAMPLE_S16RE = 4;

const int PA_SAMPLE_FLOAT32RE = 6;

const int PA_SAMPLE_S32RE = 8;

const int PA_SAMPLE_S24RE = 10;

const int PA_SAMPLE_S24_32RE = 12;

const int PA_SAMPLE_FLOAT32 = 5;

const int PA_SAMPLE_U8 = 0;

const int PA_SAMPLE_ALAW = 1;

const int PA_SAMPLE_ULAW = 2;

const int PA_SAMPLE_S16LE = 3;

const int PA_SAMPLE_S16BE = 4;

const int PA_SAMPLE_FLOAT32LE = 5;

const int PA_SAMPLE_FLOAT32BE = 6;

const int PA_SAMPLE_S32LE = 7;

const int PA_SAMPLE_S32BE = 8;

const int PA_SAMPLE_S24LE = 9;

const int PA_SAMPLE_S24BE = 10;

const int PA_SAMPLE_S24_32LE = 11;

const int PA_SAMPLE_S24_32BE = 12;

const int PA_SAMPLE_SPEC_SNPRINT_MAX = 32;

const int PA_BYTES_SNPRINT_MAX = 11;

const int PA_CONTEXT_UNCONNECTED = 0;

const int PA_CONTEXT_CONNECTING = 1;

const int PA_CONTEXT_AUTHORIZING = 2;

const int PA_CONTEXT_SETTING_NAME = 3;

const int PA_CONTEXT_READY = 4;

const int PA_CONTEXT_FAILED = 5;

const int PA_CONTEXT_TERMINATED = 6;

const int PA_STREAM_UNCONNECTED = 0;

const int PA_STREAM_CREATING = 1;

const int PA_STREAM_READY = 2;

const int PA_STREAM_FAILED = 3;

const int PA_STREAM_TERMINATED = 4;

const int PA_OPERATION_RUNNING = 0;

const int PA_OPERATION_DONE = 1;

const int PA_OPERATION_CANCELED = 2;

const int PA_OPERATION_CANCELLED = 2;

const int PA_INVALID_INDEX = 4294967295;

const int PA_CONTEXT_NOAUTOSPAWN = 1;

const int PA_CONTEXT_NOFAIL = 2;

const int PA_DIRECTION_OUTPUT = 1;

const int PA_DIRECTION_INPUT = 2;

const int PA_DEVICE_TYPE_SINK = 0;

const int PA_DEVICE_TYPE_SOURCE = 1;

const int PA_STREAM_NODIRECTION = 0;

const int PA_STREAM_PLAYBACK = 1;

const int PA_STREAM_RECORD = 2;

const int PA_STREAM_UPLOAD = 3;

const int PA_STREAM_NOT_MONOTONOUS = 4;

const int PA_STREAM_START_CORKED = 1;

const int PA_STREAM_INTERPOLATE_TIMING = 2;

const int PA_STREAM_NOT_MONOTONIC = 4;

const int PA_STREAM_AUTO_TIMING_UPDATE = 8;

const int PA_STREAM_NO_REMAP_CHANNELS = 16;

const int PA_STREAM_NO_REMIX_CHANNELS = 32;

const int PA_STREAM_FIX_FORMAT = 64;

const int PA_STREAM_FIX_RATE = 128;

const int PA_STREAM_FIX_CHANNELS = 256;

const int PA_STREAM_DONT_MOVE = 512;

const int PA_STREAM_VARIABLE_RATE = 1024;

const int PA_STREAM_PEAK_DETECT = 2048;

const int PA_STREAM_START_MUTED = 4096;

const int PA_STREAM_ADJUST_LATENCY = 8192;

const int PA_STREAM_EARLY_REQUESTS = 16384;

const int PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND = 32768;

const int PA_STREAM_START_UNMUTED = 65536;

const int PA_STREAM_FAIL_ON_SUSPEND = 131072;

const int PA_STREAM_RELATIVE_VOLUME = 262144;

const int PA_STREAM_PASSTHROUGH = 524288;

const int PA_OK = 0;

const int PA_ERR_ACCESS = 1;

const int PA_ERR_COMMAND = 2;

const int PA_ERR_INVALID = 3;

const int PA_ERR_EXIST = 4;

const int PA_ERR_NOENTITY = 5;

const int PA_ERR_CONNECTIONREFUSED = 6;

const int PA_ERR_PROTOCOL = 7;

const int PA_ERR_TIMEOUT = 8;

const int PA_ERR_AUTHKEY = 9;

const int PA_ERR_INTERNAL = 10;

const int PA_ERR_CONNECTIONTERMINATED = 11;

const int PA_ERR_KILLED = 12;

const int PA_ERR_INVALIDSERVER = 13;

const int PA_ERR_MODINITFAILED = 14;

const int PA_ERR_BADSTATE = 15;

const int PA_ERR_NODATA = 16;

const int PA_ERR_VERSION = 17;

const int PA_ERR_TOOLARGE = 18;

const int PA_ERR_NOTSUPPORTED = 19;

const int PA_ERR_UNKNOWN = 20;

const int PA_ERR_NOEXTENSION = 21;

const int PA_ERR_OBSOLETE = 22;

const int PA_ERR_NOTIMPLEMENTED = 23;

const int PA_ERR_FORKED = 24;

const int PA_ERR_MAX = 27;

const int PA_SUBSCRIPTION_MASK_NULL = 0;

const int PA_SUBSCRIPTION_MASK_SINK = 1;

const int PA_SUBSCRIPTION_MASK_SOURCE = 2;

const int PA_SUBSCRIPTION_MASK_SINK_INPUT = 4;

const int PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT = 8;

const int PA_SUBSCRIPTION_MASK_MODULE = 16;

const int PA_SUBSCRIPTION_MASK_CLIENT = 32;

const int PA_SUBSCRIPTION_MASK_SAMPLE_CACHE = 64;

const int PA_SUBSCRIPTION_MASK_SERVER = 128;

const int PA_SUBSCRIPTION_MASK_AUTOLOAD = 256;

const int PA_SUBSCRIPTION_MASK_CARD = 512;

const int PA_SUBSCRIPTION_MASK_ALL = 767;

const int PA_SUBSCRIPTION_EVENT_SINK = 0;

const int PA_SUBSCRIPTION_EVENT_SOURCE = 1;

const int PA_SUBSCRIPTION_EVENT_SINK_INPUT = 2;

const int PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT = 3;

const int PA_SUBSCRIPTION_EVENT_MODULE = 4;

const int PA_SUBSCRIPTION_EVENT_CLIENT = 5;

const int PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE = 6;

const int PA_SUBSCRIPTION_EVENT_SERVER = 7;

const int PA_SUBSCRIPTION_EVENT_AUTOLOAD = 8;

const int PA_SUBSCRIPTION_EVENT_CARD = 9;

const int PA_SUBSCRIPTION_EVENT_FACILITY_MASK = 15;

const int PA_SUBSCRIPTION_EVENT_NEW = 0;

const int PA_SUBSCRIPTION_EVENT_CHANGE = 16;

const int PA_SUBSCRIPTION_EVENT_REMOVE = 32;

const int PA_SUBSCRIPTION_EVENT_TYPE_MASK = 48;

const int PA_SEEK_RELATIVE = 0;

const int PA_SEEK_ABSOLUTE = 1;

const int PA_SEEK_RELATIVE_ON_READ = 2;

const int PA_SEEK_RELATIVE_END = 3;

const int PA_SINK_HW_VOLUME_CTRL = 1;

const int PA_SINK_LATENCY = 2;

const int PA_SINK_HARDWARE = 4;

const int PA_SINK_NETWORK = 8;

const int PA_SINK_HW_MUTE_CTRL = 16;

const int PA_SINK_DECIBEL_VOLUME = 32;

const int PA_SINK_FLAT_VOLUME = 64;

const int PA_SINK_DYNAMIC_LATENCY = 128;

const int PA_SINK_SET_FORMATS = 256;

const int PA_SINK_INVALID_STATE = -1;

const int PA_SINK_RUNNING = 0;

const int PA_SINK_IDLE = 1;

const int PA_SINK_SUSPENDED = 2;

const int PA_SINK_INIT = -2;

const int PA_SINK_UNLINKED = -3;

const int PA_SOURCE_HW_VOLUME_CTRL = 1;

const int PA_SOURCE_LATENCY = 2;

const int PA_SOURCE_HARDWARE = 4;

const int PA_SOURCE_NETWORK = 8;

const int PA_SOURCE_HW_MUTE_CTRL = 16;

const int PA_SOURCE_DECIBEL_VOLUME = 32;

const int PA_SOURCE_DYNAMIC_LATENCY = 64;

const int PA_SOURCE_FLAT_VOLUME = 128;

const int PA_SOURCE_INVALID_STATE = -1;

const int PA_SOURCE_RUNNING = 0;

const int PA_SOURCE_IDLE = 1;

const int PA_SOURCE_SUSPENDED = 2;

const int PA_SOURCE_INIT = -2;

const int PA_SOURCE_UNLINKED = -3;

const String PA_STREAM_EVENT_REQUEST_CORK = 'request-cork';

const String PA_STREAM_EVENT_REQUEST_UNCORK = 'request-uncork';

const String PA_STREAM_EVENT_FORMAT_LOST = 'format-lost';

const int PA_PORT_AVAILABLE_UNKNOWN = 0;

const int PA_PORT_AVAILABLE_NO = 1;

const int PA_PORT_AVAILABLE_YES = 2;

const String PA_PROP_MEDIA_NAME = 'media.name';

const String PA_PROP_MEDIA_TITLE = 'media.title';

const String PA_PROP_MEDIA_ARTIST = 'media.artist';

const String PA_PROP_MEDIA_COPYRIGHT = 'media.copyright';

const String PA_PROP_MEDIA_SOFTWARE = 'media.software';

const String PA_PROP_MEDIA_LANGUAGE = 'media.language';

const String PA_PROP_MEDIA_FILENAME = 'media.filename';

const String PA_PROP_MEDIA_ICON = 'media.icon';

const String PA_PROP_MEDIA_ICON_NAME = 'media.icon_name';

const String PA_PROP_MEDIA_ROLE = 'media.role';

const String PA_PROP_FILTER_WANT = 'filter.want';

const String PA_PROP_FILTER_APPLY = 'filter.apply';

const String PA_PROP_FILTER_SUPPRESS = 'filter.suppress';

const String PA_PROP_EVENT_ID = 'event.id';

const String PA_PROP_EVENT_DESCRIPTION = 'event.description';

const String PA_PROP_EVENT_MOUSE_X = 'event.mouse.x';

const String PA_PROP_EVENT_MOUSE_Y = 'event.mouse.y';

const String PA_PROP_EVENT_MOUSE_HPOS = 'event.mouse.hpos';

const String PA_PROP_EVENT_MOUSE_VPOS = 'event.mouse.vpos';

const String PA_PROP_EVENT_MOUSE_BUTTON = 'event.mouse.button';

const String PA_PROP_WINDOW_NAME = 'window.name';

const String PA_PROP_WINDOW_ID = 'window.id';

const String PA_PROP_WINDOW_ICON = 'window.icon';

const String PA_PROP_WINDOW_ICON_NAME = 'window.icon_name';

const String PA_PROP_WINDOW_X = 'window.x';

const String PA_PROP_WINDOW_Y = 'window.y';

const String PA_PROP_WINDOW_WIDTH = 'window.width';

const String PA_PROP_WINDOW_HEIGHT = 'window.height';

const String PA_PROP_WINDOW_HPOS = 'window.hpos';

const String PA_PROP_WINDOW_VPOS = 'window.vpos';

const String PA_PROP_WINDOW_DESKTOP = 'window.desktop';

const String PA_PROP_WINDOW_X11_DISPLAY = 'window.x11.display';

const String PA_PROP_WINDOW_X11_SCREEN = 'window.x11.screen';

const String PA_PROP_WINDOW_X11_MONITOR = 'window.x11.monitor';

const String PA_PROP_WINDOW_X11_XID = 'window.x11.xid';

const String PA_PROP_APPLICATION_NAME = 'application.name';

const String PA_PROP_APPLICATION_ID = 'application.id';

const String PA_PROP_APPLICATION_VERSION = 'application.version';

const String PA_PROP_APPLICATION_ICON = 'application.icon';

const String PA_PROP_APPLICATION_ICON_NAME = 'application.icon_name';

const String PA_PROP_APPLICATION_LANGUAGE = 'application.language';

const String PA_PROP_APPLICATION_PROCESS_ID = 'application.process.id';

const String PA_PROP_APPLICATION_PROCESS_BINARY = 'application.process.binary';

const String PA_PROP_APPLICATION_PROCESS_USER = 'application.process.user';

const String PA_PROP_APPLICATION_PROCESS_HOST = 'application.process.host';

const String PA_PROP_APPLICATION_PROCESS_MACHINE_ID =
    'application.process.machine_id';

const String PA_PROP_APPLICATION_PROCESS_SESSION_ID =
    'application.process.session_id';

const String PA_PROP_DEVICE_STRING = 'device.string';

const String PA_PROP_DEVICE_API = 'device.api';

const String PA_PROP_DEVICE_DESCRIPTION = 'device.description';

const String PA_PROP_DEVICE_BUS_PATH = 'device.bus_path';

const String PA_PROP_DEVICE_SERIAL = 'device.serial';

const String PA_PROP_DEVICE_VENDOR_ID = 'device.vendor.id';

const String PA_PROP_DEVICE_VENDOR_NAME = 'device.vendor.name';

const String PA_PROP_DEVICE_PRODUCT_ID = 'device.product.id';

const String PA_PROP_DEVICE_PRODUCT_NAME = 'device.product.name';

const String PA_PROP_DEVICE_CLASS = 'device.class';

const String PA_PROP_DEVICE_FORM_FACTOR = 'device.form_factor';

const String PA_PROP_DEVICE_BUS = 'device.bus';

const String PA_PROP_DEVICE_ICON = 'device.icon';

const String PA_PROP_DEVICE_ICON_NAME = 'device.icon_name';

const String PA_PROP_DEVICE_ACCESS_MODE = 'device.access_mode';

const String PA_PROP_DEVICE_MASTER_DEVICE = 'device.master_device';

const String PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE =
    'device.buffering.buffer_size';

const String PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE =
    'device.buffering.fragment_size';

const String PA_PROP_DEVICE_PROFILE_NAME = 'device.profile.name';

const String PA_PROP_DEVICE_INTENDED_ROLES = 'device.intended_roles';

const String PA_PROP_DEVICE_PROFILE_DESCRIPTION = 'device.profile.description';

const String PA_PROP_MODULE_AUTHOR = 'module.author';

const String PA_PROP_MODULE_DESCRIPTION = 'module.description';

const String PA_PROP_MODULE_USAGE = 'module.usage';

const String PA_PROP_MODULE_VERSION = 'module.version';

const String PA_PROP_FORMAT_SAMPLE_FORMAT = 'format.sample_format';

const String PA_PROP_FORMAT_RATE = 'format.rate';

const String PA_PROP_FORMAT_CHANNELS = 'format.channels';

const String PA_PROP_FORMAT_CHANNEL_MAP = 'format.channel_map';

const String PA_PROP_CONTEXT_FORCE_DISABLE_SHM = 'context.force.disable.shm';

const String PA_PROP_BLUETOOTH_CODEC = 'bluetooth.codec';

const int PA_UPDATE_SET = 0;

const int PA_UPDATE_MERGE = 1;

const int PA_UPDATE_REPLACE = 2;

const int PA_CHANNEL_POSITION_INVALID = -1;

const int PA_CHANNEL_POSITION_MONO = 0;

const int PA_CHANNEL_POSITION_LEFT = 1;

const int PA_CHANNEL_POSITION_RIGHT = 2;

const int PA_CHANNEL_POSITION_CENTER = 3;

const int PA_CHANNEL_POSITION_FRONT_LEFT = 1;

const int PA_CHANNEL_POSITION_FRONT_RIGHT = 2;

const int PA_CHANNEL_POSITION_FRONT_CENTER = 3;

const int PA_CHANNEL_POSITION_REAR_CENTER = 4;

const int PA_CHANNEL_POSITION_REAR_LEFT = 5;

const int PA_CHANNEL_POSITION_REAR_RIGHT = 6;

const int PA_CHANNEL_POSITION_LFE = 7;

const int PA_CHANNEL_POSITION_SUBWOOFER = 7;

const int PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER = 8;

const int PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER = 9;

const int PA_CHANNEL_POSITION_SIDE_LEFT = 10;

const int PA_CHANNEL_POSITION_SIDE_RIGHT = 11;

const int PA_CHANNEL_POSITION_AUX0 = 12;

const int PA_CHANNEL_POSITION_AUX1 = 13;

const int PA_CHANNEL_POSITION_AUX2 = 14;

const int PA_CHANNEL_POSITION_AUX3 = 15;

const int PA_CHANNEL_POSITION_AUX4 = 16;

const int PA_CHANNEL_POSITION_AUX5 = 17;

const int PA_CHANNEL_POSITION_AUX6 = 18;

const int PA_CHANNEL_POSITION_AUX7 = 19;

const int PA_CHANNEL_POSITION_AUX8 = 20;

const int PA_CHANNEL_POSITION_AUX9 = 21;

const int PA_CHANNEL_POSITION_AUX10 = 22;

const int PA_CHANNEL_POSITION_AUX11 = 23;

const int PA_CHANNEL_POSITION_AUX12 = 24;

const int PA_CHANNEL_POSITION_AUX13 = 25;

const int PA_CHANNEL_POSITION_AUX14 = 26;

const int PA_CHANNEL_POSITION_AUX15 = 27;

const int PA_CHANNEL_POSITION_AUX16 = 28;

const int PA_CHANNEL_POSITION_AUX17 = 29;

const int PA_CHANNEL_POSITION_AUX18 = 30;

const int PA_CHANNEL_POSITION_AUX19 = 31;

const int PA_CHANNEL_POSITION_AUX20 = 32;

const int PA_CHANNEL_POSITION_AUX21 = 33;

const int PA_CHANNEL_POSITION_AUX22 = 34;

const int PA_CHANNEL_POSITION_AUX23 = 35;

const int PA_CHANNEL_POSITION_AUX24 = 36;

const int PA_CHANNEL_POSITION_AUX25 = 37;

const int PA_CHANNEL_POSITION_AUX26 = 38;

const int PA_CHANNEL_POSITION_AUX27 = 39;

const int PA_CHANNEL_POSITION_AUX28 = 40;

const int PA_CHANNEL_POSITION_AUX29 = 41;

const int PA_CHANNEL_POSITION_AUX30 = 42;

const int PA_CHANNEL_POSITION_AUX31 = 43;

const int PA_CHANNEL_POSITION_TOP_CENTER = 44;

const int PA_CHANNEL_POSITION_TOP_FRONT_LEFT = 45;

const int PA_CHANNEL_POSITION_TOP_FRONT_RIGHT = 46;

const int PA_CHANNEL_POSITION_TOP_FRONT_CENTER = 47;

const int PA_CHANNEL_POSITION_TOP_REAR_LEFT = 48;

const int PA_CHANNEL_POSITION_TOP_REAR_RIGHT = 49;

const int PA_CHANNEL_POSITION_TOP_REAR_CENTER = 50;

const int PA_CHANNEL_POSITION_MAX = 51;

const int PA_CHANNEL_MAP_AIFF = 0;

const int PA_CHANNEL_MAP_ALSA = 1;

const int PA_CHANNEL_MAP_AUX = 2;

const int PA_CHANNEL_MAP_WAVEEX = 3;

const int PA_CHANNEL_MAP_OSS = 4;

const int PA_CHANNEL_MAP_DEF_MAX = 5;

const int PA_CHANNEL_MAP_DEFAULT = 0;

const int PA_CHANNEL_MAP_SNPRINT_MAX = 336;

const int PA_ENCODING_ANY = 0;

const int PA_ENCODING_PCM = 1;

const int PA_ENCODING_AC3_IEC61937 = 2;

const int PA_ENCODING_EAC3_IEC61937 = 3;

const int PA_ENCODING_MPEG_IEC61937 = 4;

const int PA_ENCODING_DTS_IEC61937 = 5;

const int PA_ENCODING_MPEG2_AAC_IEC61937 = 6;

const int PA_ENCODING_TRUEHD_IEC61937 = 7;

const int PA_ENCODING_DTSHD_IEC61937 = 8;

const int PA_ENCODING_MAX = 9;

const int PA_ENCODING_INVALID = -1;

const int PA_FORMAT_INFO_SNPRINT_MAX = 256;

const int PA_PROP_TYPE_INT = 0;

const int PA_PROP_TYPE_INT_RANGE = 1;

const int PA_PROP_TYPE_INT_ARRAY = 2;

const int PA_PROP_TYPE_STRING = 3;

const int PA_PROP_TYPE_STRING_ARRAY = 4;

const int PA_PROP_TYPE_INVALID = -1;

const int PA_VOLUME_NORM = 65536;

const int PA_VOLUME_MUTED = 0;

const int PA_VOLUME_MAX = 2147483647;

const int PA_VOLUME_INVALID = 4294967295;

const int PA_CVOLUME_SNPRINT_MAX = 320;

const int PA_SW_CVOLUME_SNPRINT_DB_MAX = 448;

const int PA_CVOLUME_SNPRINT_VERBOSE_MAX = 1984;

const int PA_VOLUME_SNPRINT_MAX = 10;

const int PA_SW_VOLUME_SNPRINT_DB_MAX = 11;

const int PA_VOLUME_SNPRINT_VERBOSE_MAX = 35;

const double PA_DECIBEL_MININFTY = -200.0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _ALLOCA_H = 1;

const int _ASSERT_H = 1;

const int PA_MSEC_PER_SEC = 1000;

const int PA_USEC_PER_SEC = 1000000;

const int PA_NSEC_PER_SEC = 1000000000;

const int PA_USEC_PER_MSEC = 1000;

const int PA_NSEC_PER_MSEC = 1000000;

const int PA_NSEC_PER_USEC = 1000;

const int PA_USEC_INVALID = -1;

const int PA_USEC_MAX = -2;
